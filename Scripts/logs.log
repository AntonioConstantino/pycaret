2025-01-01 00:55:02,441:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-01 00:55:02,441:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-01 00:55:02,441:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-01 00:55:02,441:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-01 00:55:04,290:WARNING:C:\Users\jacj2\AppData\Local\Temp\ipykernel_23672\3561867503.py:2: DtypeWarning: Columns (8) have mixed types. Specify dtype option on import or set low_memory=False.
  data=pd.read_csv(r'..\data\train_set.csv')

2025-01-03 17:29:03,389:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-03 17:29:03,389:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-03 17:29:03,389:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-03 17:29:03,389:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-03 17:29:15,100:INFO:Initializing load_model()
2025-01-03 17:29:15,100:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model, platform=None, authentication=None, verbose=True)
2025-01-03 17:32:38,641:INFO:Initializing load_model()
2025-01-03 17:32:38,641:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model\model.pkl, platform=None, authentication=None, verbose=True)
2025-01-03 17:34:22,131:INFO:Initializing load_model()
2025-01-03 17:34:22,131:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model, platform=None, authentication=None, verbose=True)
2025-01-03 17:34:34,560:INFO:Initializing load_model()
2025-01-03 17:34:34,561:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model\model.pkl, platform=None, authentication=None, verbose=True)
2025-01-03 17:35:49,030:INFO:Initializing load_model()
2025-01-03 17:35:49,030:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model\model.pkl, platform=None, authentication=None, verbose=True)
2025-01-03 17:36:58,387:INFO:Initializing load_model()
2025-01-03 17:36:58,387:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model, platform=None, authentication=None, verbose=True)
2025-01-03 17:38:29,691:INFO:Initializing load_model()
2025-01-03 17:38:29,691:INFO:load_model(model_name=..\model\model.pkl, platform=None, authentication=None, verbose=True)
2025-01-03 17:38:43,250:INFO:Initializing load_model()
2025-01-03 17:38:43,250:INFO:load_model(model_name=..\Scripts\model.pkl, platform=None, authentication=None, verbose=True)
2025-01-03 17:40:35,099:INFO:Initializing load_model()
2025-01-03 17:40:35,099:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model.pkl, platform=None, authentication=None, verbose=True)
2025-01-03 17:40:51,689:INFO:Initializing load_model()
2025-01-03 17:40:51,689:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model\model.pkl, platform=None, authentication=None, verbose=True)
2025-01-03 17:42:02,204:INFO:Initializing load_model()
2025-01-03 17:42:02,204:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\Scripts\model.pkl, platform=None, authentication=None, verbose=True)
2025-01-03 17:42:53,026:INFO:Initializing load_model()
2025-01-03 17:42:53,026:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\Scripts\model.pkl, platform=None, authentication=None, verbose=True)
2025-01-03 17:43:24,462:INFO:Initializing load_model()
2025-01-03 17:43:24,462:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\Scripts\model, platform=None, authentication=None, verbose=True)
2025-01-03 17:45:35,822:WARNING:C:\Users\jacj2\AppData\Local\Temp\ipykernel_15844\2316916227.py:1: DtypeWarning: Columns (8) have mixed types. Specify dtype option on import or set low_memory=False.
  test=pd.read_csv(r"../data/test_set.csv")

2025-01-03 17:49:52,104:WARNING:C:\Users\jacj2\AppData\Local\Temp\ipykernel_15844\3561867503.py:2: DtypeWarning: Columns (8) have mixed types. Specify dtype option on import or set low_memory=False.
  data=pd.read_csv(r'..\data\train_set.csv')

2025-01-03 17:49:52,793:INFO:PyCaret ClassificationExperiment
2025-01-03 17:49:52,793:INFO:Logging name: clf-default-name
2025-01-03 17:49:52,793:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-03 17:49:52,793:INFO:version 3.3.2
2025-01-03 17:49:52,793:INFO:Initializing setup()
2025-01-03 17:49:52,793:INFO:self.USI: d1bd
2025-01-03 17:49:52,793:INFO:self._variable_keys: {'log_plots_param', 'y_test', 'X_train', '_ml_usecase', 'exp_name_log', 'fold_shuffle_param', 'is_multiclass', 'fold_groups_param', 'y', 'fold_generator', 'USI', 'logging_param', 'data', 'X', 'seed', 'target_param', 'memory', 'n_jobs_param', 'pipeline', 'y_train', '_available_plots', 'gpu_n_jobs_param', 'fix_imbalance', 'html_param', 'gpu_param', 'idx', 'exp_id', 'X_test'}
2025-01-03 17:49:52,793:INFO:Checking environment
2025-01-03 17:49:52,793:INFO:python_version: 3.10.15
2025-01-03 17:49:52,793:INFO:python_build: ('main', 'Oct  3 2024 07:22:19')
2025-01-03 17:49:52,793:INFO:machine: AMD64
2025-01-03 17:49:52,793:INFO:platform: Windows-10-10.0.26100-SP0
2025-01-03 17:49:52,798:INFO:Memory: svmem(total=25439199232, available=15928799232, percent=37.4, used=9510400000, free=15928799232)
2025-01-03 17:49:52,798:INFO:Physical Core: 8
2025-01-03 17:49:52,798:INFO:Logical Core: 16
2025-01-03 17:49:52,798:INFO:Checking libraries
2025-01-03 17:49:52,798:INFO:System:
2025-01-03 17:49:52,798:INFO:    python: 3.10.15 | packaged by Anaconda, Inc. | (main, Oct  3 2024, 07:22:19) [MSC v.1929 64 bit (AMD64)]
2025-01-03 17:49:52,798:INFO:executable: c:\Users\jacj2\anaconda3\envs\tensor_gpu1\python.exe
2025-01-03 17:49:52,798:INFO:   machine: Windows-10-10.0.26100-SP0
2025-01-03 17:49:52,798:INFO:PyCaret required dependencies:
2025-01-03 17:49:52,798:INFO:                 pip: 24.2
2025-01-03 17:49:52,798:INFO:          setuptools: 75.1.0
2025-01-03 17:49:52,798:INFO:             pycaret: 3.3.2
2025-01-03 17:49:52,798:INFO:             IPython: 8.30.0
2025-01-03 17:49:52,798:INFO:          ipywidgets: 8.1.5
2025-01-03 17:49:52,798:INFO:                tqdm: 4.67.1
2025-01-03 17:49:52,798:INFO:               numpy: 1.26.4
2025-01-03 17:49:52,798:INFO:              pandas: 2.1.4
2025-01-03 17:49:52,798:INFO:              jinja2: 3.1.5
2025-01-03 17:49:52,798:INFO:               scipy: 1.11.4
2025-01-03 17:49:52,798:INFO:              joblib: 1.3.2
2025-01-03 17:49:52,798:INFO:             sklearn: 1.4.2
2025-01-03 17:49:52,798:INFO:                pyod: 2.0.3
2025-01-03 17:49:52,798:INFO:            imblearn: 0.13.0
2025-01-03 17:49:52,798:INFO:   category_encoders: 2.6.4
2025-01-03 17:49:52,798:INFO:            lightgbm: 4.5.0
2025-01-03 17:49:52,798:INFO:               numba: 0.60.0
2025-01-03 17:49:52,798:INFO:            requests: 2.32.3
2025-01-03 17:49:52,798:INFO:          matplotlib: 3.7.5
2025-01-03 17:49:52,798:INFO:          scikitplot: 0.3.7
2025-01-03 17:49:52,798:INFO:         yellowbrick: 1.5
2025-01-03 17:49:52,798:INFO:              plotly: 5.24.1
2025-01-03 17:49:52,798:INFO:    plotly-resampler: Not installed
2025-01-03 17:49:52,798:INFO:             kaleido: 0.2.1
2025-01-03 17:49:52,798:INFO:           schemdraw: 0.15
2025-01-03 17:49:52,798:INFO:         statsmodels: 0.14.4
2025-01-03 17:49:52,798:INFO:              sktime: 0.26.0
2025-01-03 17:49:52,798:INFO:               tbats: 1.1.3
2025-01-03 17:49:52,798:INFO:            pmdarima: 2.0.4
2025-01-03 17:49:52,798:INFO:              psutil: 6.1.0
2025-01-03 17:49:52,798:INFO:          markupsafe: 3.0.2
2025-01-03 17:49:52,798:INFO:             pickle5: Not installed
2025-01-03 17:49:52,798:INFO:         cloudpickle: 3.1.0
2025-01-03 17:49:52,798:INFO:         deprecation: 2.1.0
2025-01-03 17:49:52,798:INFO:              xxhash: 3.5.0
2025-01-03 17:49:52,798:INFO:           wurlitzer: Not installed
2025-01-03 17:49:52,798:INFO:PyCaret optional dependencies:
2025-01-03 17:49:52,833:INFO:                shap: 0.46.0
2025-01-03 17:49:52,835:INFO:           interpret: Not installed
2025-01-03 17:49:52,835:INFO:                umap: Not installed
2025-01-03 17:49:52,837:INFO:     ydata_profiling: Not installed
2025-01-03 17:49:52,837:INFO:  explainerdashboard: Not installed
2025-01-03 17:49:52,837:INFO:             autoviz: Not installed
2025-01-03 17:49:52,837:INFO:           fairlearn: Not installed
2025-01-03 17:49:52,837:INFO:          deepchecks: Not installed
2025-01-03 17:49:52,837:INFO:             xgboost: Not installed
2025-01-03 17:49:52,837:INFO:            catboost: Not installed
2025-01-03 17:49:52,837:INFO:              kmodes: Not installed
2025-01-03 17:49:52,837:INFO:             mlxtend: Not installed
2025-01-03 17:49:52,837:INFO:       statsforecast: Not installed
2025-01-03 17:49:52,837:INFO:        tune_sklearn: Not installed
2025-01-03 17:49:52,837:INFO:                 ray: Not installed
2025-01-03 17:49:52,837:INFO:            hyperopt: Not installed
2025-01-03 17:49:52,837:INFO:              optuna: Not installed
2025-01-03 17:49:52,837:INFO:               skopt: Not installed
2025-01-03 17:49:52,837:INFO:              mlflow: Not installed
2025-01-03 17:49:52,837:INFO:              gradio: Not installed
2025-01-03 17:49:52,837:INFO:             fastapi: Not installed
2025-01-03 17:49:52,839:INFO:             uvicorn: Not installed
2025-01-03 17:49:52,839:INFO:              m2cgen: Not installed
2025-01-03 17:49:52,839:INFO:           evidently: Not installed
2025-01-03 17:49:52,839:INFO:               fugue: Not installed
2025-01-03 17:49:52,839:INFO:           streamlit: Not installed
2025-01-03 17:49:52,839:INFO:             prophet: Not installed
2025-01-03 17:49:52,839:INFO:None
2025-01-03 17:49:52,839:INFO:Set up data.
2025-01-03 17:49:56,499:INFO:Set up folding strategy.
2025-01-03 17:49:56,499:INFO:Set up train/test split.
2025-01-03 17:49:58,309:INFO:Set up index.
2025-01-03 17:49:58,337:INFO:Assigning column types.
2025-01-03 17:49:58,510:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-03 17:49:58,583:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-03 17:49:58,616:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 17:49:58,703:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:49:58,703:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:49:58,767:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-03 17:49:58,767:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 17:49:58,815:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:49:58,815:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:49:58,815:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-03 17:49:58,879:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 17:49:58,927:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:49:58,927:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:49:59,000:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 17:49:59,032:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:49:59,032:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:49:59,032:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-03 17:49:59,144:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:49:59,144:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:49:59,247:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:49:59,257:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:49:59,257:INFO:Preparing preprocessing pipeline...
2025-01-03 17:49:59,289:INFO:Set up label encoding.
2025-01-03 17:49:59,289:INFO:Set up simple imputation.
2025-01-03 17:49:59,505:INFO:Set up encoding of ordinal features.
2025-01-03 17:49:59,556:INFO:Set up encoding of categorical features.
2025-01-03 17:49:59,556:INFO:Set up removing multicollinearity.
2025-01-03 17:50:08,277:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:256: UserWarning: Persisting input arguments took 2.15s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2025-01-03 17:50:14,518:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:249: UserWarning: Persisting input arguments took 1.36s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2025-01-03 17:50:20,763:INFO:Finished creating preprocessing pipeline.
2025-01-03 17:50:20,795:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['duration', 'start_lat',
                                             'start_lon', 'end_lat', 'end_lon',
                                             'plan_duration', 'start_station',
                                             'end_station'...
                                    transformer=TargetEncoder(cols=['start_time',
                                                                    'end_time',
                                                                    'bike_id'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95)))],
         verbose=False)
2025-01-03 17:50:20,795:INFO:Creating final display dataframe.
2025-01-03 17:50:32,445:INFO:Setup _display_container:                     Description  \
0                    Session id   
1                        Target   
2                   Target type   
3                Target mapping   
4           Original data shape   
5        Transformed data shape   
6   Transformed train set shape   
7    Transformed test set shape   
8              Numeric features   
9          Categorical features   
10                   Preprocess   
11              Imputation type   
12           Numeric imputation   
13       Categorical imputation   
14     Maximum one-hot encoding   
15              Encoding method   
16     Remove multicollinearity   
17  Multicollinearity threshold   
18               Fold Generator   
19                  Fold Number   
20                     CPU Jobs   
21                      Use GPU   
22               Log Experiment   
23              Experiment Name   
24                          USI   

                                                Value  
0                                                 123  
1                                     passholder_type  
2                                          Multiclass  
3   Annual Pass: 0, Flex Pass: 1, Monthly Pass: 2,...  
4                                        (675626, 13)  
5                                        (675626, 11)  
6                                        (472938, 11)  
7                                        (202688, 11)  
8                                                   8  
9                                                   4  
10                                               True  
11                                             simple  
12                                               mean  
13                                               mode  
14                                                 25  
15                                               None  
16                                               True  
17                                               0.95  
18                                    StratifiedKFold  
19                                                 10  
20                                                 -1  
21                                              False  
22                                              False  
23                                   clf-default-name  
24                                               d1bd  
2025-01-03 17:50:32,577:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:50:32,577:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:50:32,684:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:50:32,684:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:50:32,691:INFO:setup() successfully completed in 39.92s...............
2025-01-03 17:50:32,692:INFO:Initializing compare_models()
2025-01-03 17:50:32,692:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B29B10>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B29B10>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-03 17:50:32,692:INFO:Checking exceptions
2025-01-03 17:50:32,858:INFO:Preparing display monitor
2025-01-03 17:50:32,906:INFO:Initializing Logistic Regression
2025-01-03 17:50:32,906:INFO:Total runtime is 0.0 minutes
2025-01-03 17:50:32,909:INFO:SubProcess create_model() called ==================================
2025-01-03 17:50:32,909:INFO:Initializing create_model()
2025-01-03 17:50:32,909:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B29B10>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F98C2B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 17:50:32,909:INFO:Checking exceptions
2025-01-03 17:50:32,909:INFO:Importing libraries
2025-01-03 17:50:32,909:INFO:Copying training dataset
2025-01-03 17:50:33,222:INFO:Defining folds
2025-01-03 17:50:33,222:INFO:Declaring metric variables
2025-01-03 17:50:33,233:INFO:Importing untrained model
2025-01-03 17:50:33,238:INFO:Logistic Regression Imported successfully
2025-01-03 17:50:33,250:INFO:Starting cross validation
2025-01-03 17:50:33,259:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 17:51:34,427:WARNING:C:\Users\jacj2\AppData\Local\Temp\ipykernel_15844\3561867503.py:2: DtypeWarning: Columns (8) have mixed types. Specify dtype option on import or set low_memory=False.
  data=pd.read_csv(r'..\data\train_set.csv')

2025-01-03 17:51:35,017:INFO:PyCaret ClassificationExperiment
2025-01-03 17:51:35,017:INFO:Logging name: clf-default-name
2025-01-03 17:51:35,017:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-03 17:51:35,017:INFO:version 3.3.2
2025-01-03 17:51:35,017:INFO:Initializing setup()
2025-01-03 17:51:35,017:INFO:self.USI: 74d4
2025-01-03 17:51:35,017:INFO:self._variable_keys: {'log_plots_param', 'y_test', 'X_train', '_ml_usecase', 'exp_name_log', 'fold_shuffle_param', 'is_multiclass', 'fold_groups_param', 'y', 'fold_generator', 'USI', 'logging_param', 'data', 'X', 'seed', 'target_param', 'memory', 'n_jobs_param', 'pipeline', 'y_train', '_available_plots', 'gpu_n_jobs_param', 'fix_imbalance', 'html_param', 'gpu_param', 'idx', 'exp_id', 'X_test'}
2025-01-03 17:51:35,017:INFO:Checking environment
2025-01-03 17:51:35,017:INFO:python_version: 3.10.15
2025-01-03 17:51:35,017:INFO:python_build: ('main', 'Oct  3 2024 07:22:19')
2025-01-03 17:51:35,017:INFO:machine: AMD64
2025-01-03 17:51:35,017:INFO:platform: Windows-10-10.0.26100-SP0
2025-01-03 17:51:35,024:INFO:Memory: svmem(total=25439199232, available=15608631296, percent=38.6, used=9830567936, free=15608631296)
2025-01-03 17:51:35,024:INFO:Physical Core: 8
2025-01-03 17:51:35,024:INFO:Logical Core: 16
2025-01-03 17:51:35,024:INFO:Checking libraries
2025-01-03 17:51:35,024:INFO:System:
2025-01-03 17:51:35,024:INFO:    python: 3.10.15 | packaged by Anaconda, Inc. | (main, Oct  3 2024, 07:22:19) [MSC v.1929 64 bit (AMD64)]
2025-01-03 17:51:35,024:INFO:executable: c:\Users\jacj2\anaconda3\envs\tensor_gpu1\python.exe
2025-01-03 17:51:35,024:INFO:   machine: Windows-10-10.0.26100-SP0
2025-01-03 17:51:35,024:INFO:PyCaret required dependencies:
2025-01-03 17:51:35,024:INFO:                 pip: 24.2
2025-01-03 17:51:35,024:INFO:          setuptools: 75.1.0
2025-01-03 17:51:35,024:INFO:             pycaret: 3.3.2
2025-01-03 17:51:35,024:INFO:             IPython: 8.30.0
2025-01-03 17:51:35,024:INFO:          ipywidgets: 8.1.5
2025-01-03 17:51:35,024:INFO:                tqdm: 4.67.1
2025-01-03 17:51:35,024:INFO:               numpy: 1.26.4
2025-01-03 17:51:35,024:INFO:              pandas: 2.1.4
2025-01-03 17:51:35,024:INFO:              jinja2: 3.1.5
2025-01-03 17:51:35,024:INFO:               scipy: 1.11.4
2025-01-03 17:51:35,024:INFO:              joblib: 1.3.2
2025-01-03 17:51:35,024:INFO:             sklearn: 1.4.2
2025-01-03 17:51:35,024:INFO:                pyod: 2.0.3
2025-01-03 17:51:35,024:INFO:            imblearn: 0.13.0
2025-01-03 17:51:35,024:INFO:   category_encoders: 2.6.4
2025-01-03 17:51:35,024:INFO:            lightgbm: 4.5.0
2025-01-03 17:51:35,024:INFO:               numba: 0.60.0
2025-01-03 17:51:35,024:INFO:            requests: 2.32.3
2025-01-03 17:51:35,024:INFO:          matplotlib: 3.7.5
2025-01-03 17:51:35,024:INFO:          scikitplot: 0.3.7
2025-01-03 17:51:35,024:INFO:         yellowbrick: 1.5
2025-01-03 17:51:35,024:INFO:              plotly: 5.24.1
2025-01-03 17:51:35,024:INFO:    plotly-resampler: Not installed
2025-01-03 17:51:35,024:INFO:             kaleido: 0.2.1
2025-01-03 17:51:35,024:INFO:           schemdraw: 0.15
2025-01-03 17:51:35,024:INFO:         statsmodels: 0.14.4
2025-01-03 17:51:35,024:INFO:              sktime: 0.26.0
2025-01-03 17:51:35,024:INFO:               tbats: 1.1.3
2025-01-03 17:51:35,024:INFO:            pmdarima: 2.0.4
2025-01-03 17:51:35,024:INFO:              psutil: 6.1.0
2025-01-03 17:51:35,024:INFO:          markupsafe: 3.0.2
2025-01-03 17:51:35,024:INFO:             pickle5: Not installed
2025-01-03 17:51:35,024:INFO:         cloudpickle: 3.1.0
2025-01-03 17:51:35,024:INFO:         deprecation: 2.1.0
2025-01-03 17:51:35,024:INFO:              xxhash: 3.5.0
2025-01-03 17:51:35,024:INFO:           wurlitzer: Not installed
2025-01-03 17:51:35,024:INFO:PyCaret optional dependencies:
2025-01-03 17:51:35,024:INFO:                shap: 0.46.0
2025-01-03 17:51:35,024:INFO:           interpret: Not installed
2025-01-03 17:51:35,024:INFO:                umap: Not installed
2025-01-03 17:51:35,024:INFO:     ydata_profiling: Not installed
2025-01-03 17:51:35,024:INFO:  explainerdashboard: Not installed
2025-01-03 17:51:35,024:INFO:             autoviz: Not installed
2025-01-03 17:51:35,024:INFO:           fairlearn: Not installed
2025-01-03 17:51:35,024:INFO:          deepchecks: Not installed
2025-01-03 17:51:35,024:INFO:             xgboost: Not installed
2025-01-03 17:51:35,024:INFO:            catboost: Not installed
2025-01-03 17:51:35,024:INFO:              kmodes: Not installed
2025-01-03 17:51:35,024:INFO:             mlxtend: Not installed
2025-01-03 17:51:35,024:INFO:       statsforecast: Not installed
2025-01-03 17:51:35,024:INFO:        tune_sklearn: Not installed
2025-01-03 17:51:35,024:INFO:                 ray: Not installed
2025-01-03 17:51:35,024:INFO:            hyperopt: Not installed
2025-01-03 17:51:35,024:INFO:              optuna: Not installed
2025-01-03 17:51:35,024:INFO:               skopt: Not installed
2025-01-03 17:51:35,033:INFO:              mlflow: Not installed
2025-01-03 17:51:35,033:INFO:              gradio: Not installed
2025-01-03 17:51:35,033:INFO:             fastapi: Not installed
2025-01-03 17:51:35,033:INFO:             uvicorn: Not installed
2025-01-03 17:51:35,033:INFO:              m2cgen: Not installed
2025-01-03 17:51:35,033:INFO:           evidently: Not installed
2025-01-03 17:51:35,033:INFO:               fugue: Not installed
2025-01-03 17:51:35,033:INFO:           streamlit: Not installed
2025-01-03 17:51:35,033:INFO:             prophet: Not installed
2025-01-03 17:51:35,033:INFO:None
2025-01-03 17:51:35,033:INFO:Set up data.
2025-01-03 17:51:38,423:INFO:Set up folding strategy.
2025-01-03 17:51:38,423:INFO:Set up train/test split.
2025-01-03 17:51:40,036:INFO:Set up index.
2025-01-03 17:51:40,067:INFO:Assigning column types.
2025-01-03 17:51:40,210:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-03 17:51:40,263:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-03 17:51:40,263:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 17:51:40,313:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:51:40,313:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:51:40,374:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-03 17:51:40,374:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 17:51:40,419:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:51:40,419:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:51:40,419:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-03 17:51:40,476:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 17:51:40,508:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:51:40,508:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:51:40,575:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 17:51:40,619:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:51:40,619:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:51:40,619:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-03 17:51:40,722:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:51:40,722:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:51:40,834:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:51:40,834:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:51:40,834:INFO:Preparing preprocessing pipeline...
2025-01-03 17:51:40,850:INFO:Set up label encoding.
2025-01-03 17:51:40,850:INFO:Set up simple imputation.
2025-01-03 17:51:40,983:INFO:Set up encoding of ordinal features.
2025-01-03 17:51:41,034:INFO:Set up encoding of categorical features.
2025-01-03 17:51:41,046:INFO:Set up removing multicollinearity.
2025-01-03 17:51:49,343:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:256: UserWarning: Persisting input arguments took 2.06s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2025-01-03 17:51:53,069:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:249: UserWarning: Persisting input arguments took 1.34s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2025-01-03 17:51:56,856:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:256: UserWarning: Persisting input arguments took 1.41s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2025-01-03 17:52:00,458:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:249: UserWarning: Persisting input arguments took 1.68s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2025-01-03 17:52:05,238:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:256: UserWarning: Persisting input arguments took 1.96s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2025-01-03 17:52:16,209:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:249: UserWarning: Persisting input arguments took 3.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2025-01-03 17:52:24,533:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:256: UserWarning: Persisting input arguments took 3.70s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2025-01-03 17:52:24,816:INFO:Finished creating preprocessing pipeline.
2025-01-03 17:52:24,842:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['duration', 'start_lat',
                                             'start_lon', 'end_lat', 'end_lon',
                                             'start_station', 'end_station'],
                                    transformer=Si...
                                    transformer=TargetEncoder(cols=['start_time',
                                                                    'end_time',
                                                                    'bike_id'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95)))],
         verbose=False)
2025-01-03 17:52:24,842:INFO:Creating final display dataframe.
2025-01-03 17:52:34,918:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 17:52:39,695:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 2.45s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_full_transform(

2025-01-03 17:52:46,549:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 17:52:51,631:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 2.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 17:52:54,143:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 2.46s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_full_transform(

2025-01-03 17:52:59,268:INFO:Setup _display_container:                     Description  \
0                    Session id   
1                        Target   
2                   Target type   
3                Target mapping   
4           Original data shape   
5        Transformed data shape   
6   Transformed train set shape   
7    Transformed test set shape   
8              Numeric features   
9          Categorical features   
10                   Preprocess   
11              Imputation type   
12           Numeric imputation   
13       Categorical imputation   
14     Maximum one-hot encoding   
15              Encoding method   
16     Remove multicollinearity   
17  Multicollinearity threshold   
18               Fold Generator   
19                  Fold Number   
20                     CPU Jobs   
21                      Use GPU   
22               Log Experiment   
23              Experiment Name   
24                          USI   

                                                Value  
0                                                 123  
1                                     passholder_type  
2                                          Multiclass  
3   Annual Pass: 0, Flex Pass: 1, Monthly Pass: 2,...  
4                                        (675626, 12)  
5                                        (675626, 10)  
6                                        (472938, 10)  
7                                        (202688, 10)  
8                                                   7  
9                                                   4  
10                                               True  
11                                             simple  
12                                               mean  
13                                               mode  
14                                                 25  
15                                               None  
16                                               True  
17                                               0.95  
18                                    StratifiedKFold  
19                                                 10  
20                                                 -1  
21                                              False  
22                                              False  
23                                   clf-default-name  
24                                               74d4  
2025-01-03 17:52:59,342:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:52:59,348:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:52:59,419:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:52:59,419:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 17:52:59,421:INFO:setup() successfully completed in 84.41s...............
2025-01-03 17:52:59,421:INFO:Initializing compare_models()
2025-01-03 17:52:59,421:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-03 17:52:59,421:INFO:Checking exceptions
2025-01-03 17:52:59,521:INFO:Preparing display monitor
2025-01-03 17:52:59,545:INFO:Initializing Logistic Regression
2025-01-03 17:52:59,545:INFO:Total runtime is 8.384386698404947e-06 minutes
2025-01-03 17:52:59,549:INFO:SubProcess create_model() called ==================================
2025-01-03 17:52:59,549:INFO:Initializing create_model()
2025-01-03 17:52:59,550:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 17:52:59,550:INFO:Checking exceptions
2025-01-03 17:52:59,550:INFO:Importing libraries
2025-01-03 17:52:59,550:INFO:Copying training dataset
2025-01-03 17:52:59,745:INFO:Defining folds
2025-01-03 17:52:59,745:INFO:Declaring metric variables
2025-01-03 17:52:59,745:INFO:Importing untrained model
2025-01-03 17:52:59,745:INFO:Logistic Regression Imported successfully
2025-01-03 17:52:59,757:INFO:Starting cross validation
2025-01-03 17:52:59,760:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 17:55:16,175:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 17:55:16,451:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 17:55:16,846:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 17:55:17,103:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 17:55:17,187:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 17:55:17,229:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:17,373:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 17:55:17,506:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:17,575:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:17,656:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 17:55:17,756:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:17,769:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:17,788:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:17,891:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:17,941:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:17,956:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 17:55:18,063:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:18,063:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 17:55:18,088:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:18,088:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:18,252:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:18,359:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:18,365:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:18,545:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:18,662:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:18,693:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 17:55:18,798:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:19,046:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:19,202:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:19,307:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:19,349:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 17:55:19,864:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 17:55:19,979:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:20,181:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 17:55:20,199:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:20,321:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:20,433:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:20,516:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 17:55:20,612:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 17:55:20,627:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 17:55:20,724:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:20,904:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 17:55:20,931:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 17:55:20,945:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:21,014:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 17:55:21,029:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:21,071:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:21,109:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:21,168:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:21,210:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 17:55:21,239:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:21,307:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:21,321:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:21,361:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:21,453:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:21,453:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:21,529:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:21,557:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:21,658:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:21,747:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:22,140:INFO:Calculating mean and std
2025-01-03 17:55:22,140:INFO:Creating metrics dataframe
2025-01-03 17:55:22,140:INFO:Uploading results into container
2025-01-03 17:55:22,140:INFO:Uploading model into container now
2025-01-03 17:55:22,140:INFO:_master_model_container: 1
2025-01-03 17:55:22,140:INFO:_display_container: 2
2025-01-03 17:55:22,140:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-03 17:55:22,140:INFO:create_model() successfully completed......................................
2025-01-03 17:55:22,305:INFO:SubProcess create_model() end ==================================
2025-01-03 17:55:22,305:INFO:Creating metrics dataframe
2025-01-03 17:55:22,305:INFO:Initializing K Neighbors Classifier
2025-01-03 17:55:22,305:INFO:Total runtime is 2.3793460408846534 minutes
2025-01-03 17:55:22,319:INFO:SubProcess create_model() called ==================================
2025-01-03 17:55:22,319:INFO:Initializing create_model()
2025-01-03 17:55:22,319:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 17:55:22,320:INFO:Checking exceptions
2025-01-03 17:55:22,320:INFO:Importing libraries
2025-01-03 17:55:22,320:INFO:Copying training dataset
2025-01-03 17:55:22,502:INFO:Defining folds
2025-01-03 17:55:22,502:INFO:Declaring metric variables
2025-01-03 17:55:22,507:INFO:Importing untrained model
2025-01-03 17:55:22,507:INFO:K Neighbors Classifier Imported successfully
2025-01-03 17:55:22,516:INFO:Starting cross validation
2025-01-03 17:55:22,516:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 17:55:43,415:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:43,746:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:43,871:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:43,893:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:44,107:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:44,118:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:44,158:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:44,250:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:44,320:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:44,325:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:44,372:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:44,379:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:44,446:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:44,543:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:44,673:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:44,770:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:44,835:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:44,854:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:45,014:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:45,063:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:45,169:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:45,212:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:45,369:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:45,445:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:45,545:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:45,693:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:45,758:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:45,804:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:45,826:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:45,841:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:45,888:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:45,929:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:45,987:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:46,028:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:46,080:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:46,202:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:46,210:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:46,282:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:46,334:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:55:46,420:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:46,809:INFO:Calculating mean and std
2025-01-03 17:55:46,809:INFO:Creating metrics dataframe
2025-01-03 17:55:46,814:INFO:Uploading results into container
2025-01-03 17:55:46,814:INFO:Uploading model into container now
2025-01-03 17:55:46,815:INFO:_master_model_container: 2
2025-01-03 17:55:46,815:INFO:_display_container: 2
2025-01-03 17:55:46,815:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-03 17:55:46,815:INFO:create_model() successfully completed......................................
2025-01-03 17:55:46,963:INFO:SubProcess create_model() end ==================================
2025-01-03 17:55:46,963:INFO:Creating metrics dataframe
2025-01-03 17:55:46,978:INFO:Initializing Naive Bayes
2025-01-03 17:55:46,978:INFO:Total runtime is 2.7905528664588926 minutes
2025-01-03 17:55:46,981:INFO:SubProcess create_model() called ==================================
2025-01-03 17:55:46,981:INFO:Initializing create_model()
2025-01-03 17:55:46,981:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 17:55:46,981:INFO:Checking exceptions
2025-01-03 17:55:46,981:INFO:Importing libraries
2025-01-03 17:55:46,982:INFO:Copying training dataset
2025-01-03 17:55:47,144:INFO:Defining folds
2025-01-03 17:55:47,144:INFO:Declaring metric variables
2025-01-03 17:55:47,157:INFO:Importing untrained model
2025-01-03 17:55:47,160:INFO:Naive Bayes Imported successfully
2025-01-03 17:55:47,160:INFO:Starting cross validation
2025-01-03 17:55:47,169:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 17:55:59,480:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:59,751:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:55:59,814:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:00,019:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:00,101:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:00,380:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:00,436:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:00,681:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:00,917:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:01,132:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:01,392:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:01,626:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:01,900:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:02,152:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:02,386:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:02,390:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:02,622:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:02,858:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:03,017:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:03,245:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:03,419:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:03,464:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:03,642:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:03,862:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:03,872:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:04,099:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:04,122:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:04,303:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:04,343:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:04,552:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:04,918:INFO:Calculating mean and std
2025-01-03 17:56:04,918:INFO:Creating metrics dataframe
2025-01-03 17:56:04,922:INFO:Uploading results into container
2025-01-03 17:56:04,922:INFO:Uploading model into container now
2025-01-03 17:56:04,922:INFO:_master_model_container: 3
2025-01-03 17:56:04,923:INFO:_display_container: 2
2025-01-03 17:56:04,923:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-03 17:56:04,923:INFO:create_model() successfully completed......................................
2025-01-03 17:56:05,080:INFO:SubProcess create_model() end ==================================
2025-01-03 17:56:05,080:INFO:Creating metrics dataframe
2025-01-03 17:56:05,083:INFO:Initializing Decision Tree Classifier
2025-01-03 17:56:05,083:INFO:Total runtime is 3.092311712106069 minutes
2025-01-03 17:56:05,088:INFO:SubProcess create_model() called ==================================
2025-01-03 17:56:05,088:INFO:Initializing create_model()
2025-01-03 17:56:05,088:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 17:56:05,088:INFO:Checking exceptions
2025-01-03 17:56:05,088:INFO:Importing libraries
2025-01-03 17:56:05,088:INFO:Copying training dataset
2025-01-03 17:56:05,249:INFO:Defining folds
2025-01-03 17:56:05,249:INFO:Declaring metric variables
2025-01-03 17:56:05,259:INFO:Importing untrained model
2025-01-03 17:56:05,262:INFO:Decision Tree Classifier Imported successfully
2025-01-03 17:56:05,266:INFO:Starting cross validation
2025-01-03 17:56:05,270:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 17:56:19,927:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:20,225:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:20,489:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:20,509:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:20,770:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:20,925:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:56:21,034:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:21,324:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:21,560:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:21,701:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:21,705:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:56:21,812:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:21,962:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:22,101:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:56:22,214:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:22,340:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:22,590:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:22,726:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:56:22,824:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:22,849:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:23,076:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:23,213:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:56:23,309:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:23,420:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:23,585:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:23,668:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:23,797:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:56:23,822:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:23,851:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:23,885:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:24,031:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:24,074:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:24,211:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:56:24,296:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:24,299:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:24,502:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:24,629:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 17:56:24,712:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 17:56:25,114:INFO:Calculating mean and std
2025-01-03 17:56:25,114:INFO:Creating metrics dataframe
2025-01-03 17:56:25,117:INFO:Uploading results into container
2025-01-03 17:56:25,118:INFO:Uploading model into container now
2025-01-03 17:56:25,118:INFO:_master_model_container: 4
2025-01-03 17:56:25,118:INFO:_display_container: 2
2025-01-03 17:56:25,119:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-03 17:56:25,119:INFO:create_model() successfully completed......................................
2025-01-03 17:56:25,266:INFO:SubProcess create_model() end ==================================
2025-01-03 17:56:25,266:INFO:Creating metrics dataframe
2025-01-03 17:56:25,279:INFO:Initializing SVM - Linear Kernel
2025-01-03 17:56:25,279:INFO:Total runtime is 3.4289134979248046 minutes
2025-01-03 17:56:25,279:INFO:SubProcess create_model() called ==================================
2025-01-03 17:56:25,279:INFO:Initializing create_model()
2025-01-03 17:56:25,279:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 17:56:25,279:INFO:Checking exceptions
2025-01-03 17:56:25,279:INFO:Importing libraries
2025-01-03 17:56:25,279:INFO:Copying training dataset
2025-01-03 17:56:25,446:INFO:Defining folds
2025-01-03 17:56:25,446:INFO:Declaring metric variables
2025-01-03 17:56:25,459:INFO:Importing untrained model
2025-01-03 17:56:25,464:INFO:SVM - Linear Kernel Imported successfully
2025-01-03 17:56:25,470:INFO:Starting cross validation
2025-01-03 17:56:25,475:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:00:38,584:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:00:38,890:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:00:39,475:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:00:39,690:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:00:39,836:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:00:40,055:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:00:40,205:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:00:40,520:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:00:40,581:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:00:40,755:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:00:40,883:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:00:41,110:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:00:45,977:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:00:46,899:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:00:47,075:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:00:47,490:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:00:47,730:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:00:47,920:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:02,414:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:02,537:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:02,794:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:02,928:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:03,046:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:05,082:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:01:05,442:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:05,536:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:05,758:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:05,883:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:05,968:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:07,177:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:01:07,508:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:07,608:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:07,814:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:07,953:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:08,050:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:08,676:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:01:09,000:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:09,091:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:09,299:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:09,411:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:01:09,424:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:09,508:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:09,717:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:09,812:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:10,031:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:10,146:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:10,248:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:13,199:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:01:13,509:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:13,615:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:13,849:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:13,964:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:14,061:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:14,948:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:01:15,229:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:15,311:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:15,519:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:15,644:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:15,727:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:16,117:INFO:Calculating mean and std
2025-01-03 18:01:16,118:INFO:Creating metrics dataframe
2025-01-03 18:01:16,119:INFO:Uploading results into container
2025-01-03 18:01:16,119:INFO:Uploading model into container now
2025-01-03 18:01:16,121:INFO:_master_model_container: 5
2025-01-03 18:01:16,121:INFO:_display_container: 2
2025-01-03 18:01:16,121:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-03 18:01:16,121:INFO:create_model() successfully completed......................................
2025-01-03 18:01:16,280:INFO:SubProcess create_model() end ==================================
2025-01-03 18:01:16,281:INFO:Creating metrics dataframe
2025-01-03 18:01:16,285:INFO:Initializing Ridge Classifier
2025-01-03 18:01:16,285:INFO:Total runtime is 8.279006274541219 minutes
2025-01-03 18:01:16,290:INFO:SubProcess create_model() called ==================================
2025-01-03 18:01:16,290:INFO:Initializing create_model()
2025-01-03 18:01:16,290:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:01:16,290:INFO:Checking exceptions
2025-01-03 18:01:16,292:INFO:Importing libraries
2025-01-03 18:01:16,292:INFO:Copying training dataset
2025-01-03 18:01:16,452:INFO:Defining folds
2025-01-03 18:01:16,452:INFO:Declaring metric variables
2025-01-03 18:01:16,460:INFO:Importing untrained model
2025-01-03 18:01:16,463:INFO:Ridge Classifier Imported successfully
2025-01-03 18:01:16,468:INFO:Starting cross validation
2025-01-03 18:01:16,471:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:01:28,485:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:28,602:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:28,891:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:28,893:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:28,998:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:29,047:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:29,155:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:29,282:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:29,441:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:29,559:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:29,607:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:29,725:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:29,994:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:30,148:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:30,248:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:30,331:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:30,432:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:30,703:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:30,834:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:30,834:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:30,928:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:30,928:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:31,153:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:31,290:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:31,382:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:31,431:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:31,527:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:31,751:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:31,886:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:31,971:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:32,094:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:32,186:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:32,402:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:32,540:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:32,570:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:32,621:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:32,663:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:32,871:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:32,997:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:32,998:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:33,081:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:33,090:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:33,302:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:33,361:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:01:33,414:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:33,458:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:33,523:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:33,672:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:33,790:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:01:33,879:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:01:34,260:INFO:Calculating mean and std
2025-01-03 18:01:34,260:INFO:Creating metrics dataframe
2025-01-03 18:01:34,260:INFO:Uploading results into container
2025-01-03 18:01:34,260:INFO:Uploading model into container now
2025-01-03 18:01:34,260:INFO:_master_model_container: 6
2025-01-03 18:01:34,260:INFO:_display_container: 2
2025-01-03 18:01:34,260:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-03 18:01:34,260:INFO:create_model() successfully completed......................................
2025-01-03 18:01:34,414:INFO:SubProcess create_model() end ==================================
2025-01-03 18:01:34,414:INFO:Creating metrics dataframe
2025-01-03 18:01:34,414:INFO:Initializing Random Forest Classifier
2025-01-03 18:01:34,414:INFO:Total runtime is 8.58116649389267 minutes
2025-01-03 18:01:34,429:INFO:SubProcess create_model() called ==================================
2025-01-03 18:01:34,429:INFO:Initializing create_model()
2025-01-03 18:01:34,429:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:01:34,429:INFO:Checking exceptions
2025-01-03 18:01:34,429:INFO:Importing libraries
2025-01-03 18:01:34,429:INFO:Copying training dataset
2025-01-03 18:01:34,600:INFO:Defining folds
2025-01-03 18:01:34,600:INFO:Declaring metric variables
2025-01-03 18:01:34,603:INFO:Importing untrained model
2025-01-03 18:01:34,607:INFO:Random Forest Classifier Imported successfully
2025-01-03 18:01:34,611:INFO:Starting cross validation
2025-01-03 18:01:34,611:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:02:53,318:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:02:55,789:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:02:57,127:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:02:58,171:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:00,420:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:02,043:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:02,833:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:03:03,532:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:04,515:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:05,771:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:06,392:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:03:06,804:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:08,142:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:08,876:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:09,054:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:09,131:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:03:09,311:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:09,343:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:09,492:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:09,558:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:09,703:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:09,820:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:03:09,879:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:09,897:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:03:09,932:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:09,998:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:10,009:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:10,040:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:03:10,149:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:10,298:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:10,472:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:03:10,494:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:10,591:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:10,736:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:10,739:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:10,873:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:03:10,953:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:10,959:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:11,079:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:03:11,166:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:11,558:INFO:Calculating mean and std
2025-01-03 18:03:11,560:INFO:Creating metrics dataframe
2025-01-03 18:03:11,561:INFO:Uploading results into container
2025-01-03 18:03:11,561:INFO:Uploading model into container now
2025-01-03 18:03:11,561:INFO:_master_model_container: 7
2025-01-03 18:03:11,561:INFO:_display_container: 2
2025-01-03 18:03:11,561:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-03 18:03:11,561:INFO:create_model() successfully completed......................................
2025-01-03 18:03:11,724:INFO:SubProcess create_model() end ==================================
2025-01-03 18:03:11,724:INFO:Creating metrics dataframe
2025-01-03 18:03:11,729:INFO:Initializing Quadratic Discriminant Analysis
2025-01-03 18:03:11,729:INFO:Total runtime is 10.203083992004395 minutes
2025-01-03 18:03:11,729:INFO:SubProcess create_model() called ==================================
2025-01-03 18:03:11,729:INFO:Initializing create_model()
2025-01-03 18:03:11,729:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:03:11,729:INFO:Checking exceptions
2025-01-03 18:03:11,729:INFO:Importing libraries
2025-01-03 18:03:11,729:INFO:Copying training dataset
2025-01-03 18:03:11,922:INFO:Defining folds
2025-01-03 18:03:11,922:INFO:Declaring metric variables
2025-01-03 18:03:11,924:INFO:Importing untrained model
2025-01-03 18:03:11,928:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-03 18:03:11,932:INFO:Starting cross validation
2025-01-03 18:03:11,937:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:03:24,457:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:03:24,573:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:24,893:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:24,984:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:03:25,096:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:25,202:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:25,392:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:25,711:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:25,715:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:03:25,838:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:26,157:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:26,415:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:26,601:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:03:26,721:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:26,997:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:27,257:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:27,263:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:03:27,366:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:27,636:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:27,830:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:03:27,872:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:27,929:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:28,192:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:28,425:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:03:28,425:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:28,530:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:28,758:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:29,003:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:03:29,003:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:29,103:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:29,336:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:29,488:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:03:29,563:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:29,579:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:29,782:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:03:29,796:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:29,873:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:30,007:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:30,093:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:30,288:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:03:30,684:INFO:Calculating mean and std
2025-01-03 18:03:30,685:INFO:Creating metrics dataframe
2025-01-03 18:03:30,687:INFO:Uploading results into container
2025-01-03 18:03:30,688:INFO:Uploading model into container now
2025-01-03 18:03:30,688:INFO:_master_model_container: 8
2025-01-03 18:03:30,688:INFO:_display_container: 2
2025-01-03 18:03:30,689:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-03 18:03:30,689:INFO:create_model() successfully completed......................................
2025-01-03 18:03:30,843:INFO:SubProcess create_model() end ==================================
2025-01-03 18:03:30,843:INFO:Creating metrics dataframe
2025-01-03 18:03:30,849:INFO:Initializing Ada Boost Classifier
2025-01-03 18:03:30,852:INFO:Total runtime is 10.521784683068594 minutes
2025-01-03 18:03:30,852:INFO:SubProcess create_model() called ==================================
2025-01-03 18:03:30,852:INFO:Initializing create_model()
2025-01-03 18:03:30,852:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:03:30,852:INFO:Checking exceptions
2025-01-03 18:03:30,852:INFO:Importing libraries
2025-01-03 18:03:30,852:INFO:Copying training dataset
2025-01-03 18:03:31,016:INFO:Defining folds
2025-01-03 18:03:31,016:INFO:Declaring metric variables
2025-01-03 18:03:31,026:INFO:Importing untrained model
2025-01-03 18:03:31,031:INFO:Ada Boost Classifier Imported successfully
2025-01-03 18:03:31,037:INFO:Starting cross validation
2025-01-03 18:03:31,040:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:03:42,502:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:03:42,740:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:03:43,521:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:03:44,283:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:03:45,004:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:03:45,844:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:03:46,610:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:03:47,332:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:03:47,954:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:03:48,827:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:04:17,822:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:04:17,951:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:04:17,971:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:18,060:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:18,277:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:18,395:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:18,584:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:04:18,616:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:18,629:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:04:18,726:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:18,762:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:19,086:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:19,419:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:19,513:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:04:19,630:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:19,979:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:20,119:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:04:20,241:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:20,289:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:20,551:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:20,756:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:04:20,871:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:20,897:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:21,246:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:21,390:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:04:21,518:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:21,551:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:21,827:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:21,842:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:04:21,959:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:22,106:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:22,276:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:22,370:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:04:22,483:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:22,608:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:22,834:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:04:22,846:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:22,974:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:23,165:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:23,301:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:23,572:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:04:23,981:INFO:Calculating mean and std
2025-01-03 18:04:23,982:INFO:Creating metrics dataframe
2025-01-03 18:04:23,985:INFO:Uploading results into container
2025-01-03 18:04:23,986:INFO:Uploading model into container now
2025-01-03 18:04:23,986:INFO:_master_model_container: 9
2025-01-03 18:04:23,986:INFO:_display_container: 2
2025-01-03 18:04:23,987:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-03 18:04:23,987:INFO:create_model() successfully completed......................................
2025-01-03 18:04:24,144:INFO:SubProcess create_model() end ==================================
2025-01-03 18:04:24,144:INFO:Creating metrics dataframe
2025-01-03 18:04:24,146:INFO:Initializing Gradient Boosting Classifier
2025-01-03 18:04:24,146:INFO:Total runtime is 11.410033261775972 minutes
2025-01-03 18:04:24,154:INFO:SubProcess create_model() called ==================================
2025-01-03 18:04:24,154:INFO:Initializing create_model()
2025-01-03 18:04:24,154:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:04:24,154:INFO:Checking exceptions
2025-01-03 18:04:24,154:INFO:Importing libraries
2025-01-03 18:04:24,154:INFO:Copying training dataset
2025-01-03 18:04:24,327:INFO:Defining folds
2025-01-03 18:04:24,327:INFO:Declaring metric variables
2025-01-03 18:04:24,344:INFO:Importing untrained model
2025-01-03 18:04:24,348:INFO:Gradient Boosting Classifier Imported successfully
2025-01-03 18:04:24,348:INFO:Starting cross validation
2025-01-03 18:04:24,358:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:14:30,320:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:30,366:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:30,449:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:30,505:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:30,746:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:30,826:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:31,057:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:31,103:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:31,153:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:31,240:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:31,541:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:31,578:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:31,697:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:31,844:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:31,880:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:31,953:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:31,973:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:32,296:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:32,299:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:32,457:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:14:32,587:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:32,658:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:32,786:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:32,872:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:32,996:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:33,106:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:33,283:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:14:33,325:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:33,414:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:33,601:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:33,661:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:33,736:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:33,900:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:33,981:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:34,035:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:34,162:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:14:34,300:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:34,313:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:34,337:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:34,444:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:34,660:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:34,745:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:35,079:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:35,480:INFO:Calculating mean and std
2025-01-03 18:14:35,481:INFO:Creating metrics dataframe
2025-01-03 18:14:35,483:INFO:Uploading results into container
2025-01-03 18:14:35,484:INFO:Uploading model into container now
2025-01-03 18:14:35,484:INFO:_master_model_container: 10
2025-01-03 18:14:35,484:INFO:_display_container: 2
2025-01-03 18:14:35,485:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-03 18:14:35,485:INFO:create_model() successfully completed......................................
2025-01-03 18:14:35,645:INFO:SubProcess create_model() end ==================================
2025-01-03 18:14:35,645:INFO:Creating metrics dataframe
2025-01-03 18:14:35,646:INFO:Initializing Linear Discriminant Analysis
2025-01-03 18:14:35,646:INFO:Total runtime is 21.601687745253244 minutes
2025-01-03 18:14:35,657:INFO:SubProcess create_model() called ==================================
2025-01-03 18:14:35,657:INFO:Initializing create_model()
2025-01-03 18:14:35,657:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:14:35,657:INFO:Checking exceptions
2025-01-03 18:14:35,657:INFO:Importing libraries
2025-01-03 18:14:35,658:INFO:Copying training dataset
2025-01-03 18:14:35,825:INFO:Defining folds
2025-01-03 18:14:35,825:INFO:Declaring metric variables
2025-01-03 18:14:35,830:INFO:Importing untrained model
2025-01-03 18:14:35,833:INFO:Linear Discriminant Analysis Imported successfully
2025-01-03 18:14:35,839:INFO:Starting cross validation
2025-01-03 18:14:35,844:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:14:49,097:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:49,233:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:49,550:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:49,557:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:49,685:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:49,722:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:14:49,842:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:50,029:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:50,230:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:14:50,366:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:50,487:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:50,621:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:50,936:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:51,119:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:51,120:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:14:51,257:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:51,261:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:51,546:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:51,740:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:14:51,876:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:51,876:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:52,001:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:52,300:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:52,453:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:52,462:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:14:52,585:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:52,592:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:52,913:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:53,082:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:14:53,141:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:53,196:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:53,271:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:53,558:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:53,639:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:53,742:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:14:53,772:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:53,876:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:54,074:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:54,257:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:14:54,379:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:54,400:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:54,528:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:54,800:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:14:54,805:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:54,938:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:54,997:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:14:55,148:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:55,290:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:55,487:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:14:55,621:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:14:56,222:INFO:Calculating mean and std
2025-01-03 18:14:56,224:INFO:Creating metrics dataframe
2025-01-03 18:14:56,224:INFO:Uploading results into container
2025-01-03 18:14:56,224:INFO:Uploading model into container now
2025-01-03 18:14:56,224:INFO:_master_model_container: 11
2025-01-03 18:14:56,224:INFO:_display_container: 2
2025-01-03 18:14:56,224:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-03 18:14:56,224:INFO:create_model() successfully completed......................................
2025-01-03 18:14:56,377:INFO:SubProcess create_model() end ==================================
2025-01-03 18:14:56,377:INFO:Creating metrics dataframe
2025-01-03 18:14:56,393:INFO:Initializing Extra Trees Classifier
2025-01-03 18:14:56,394:INFO:Total runtime is 21.94748653570811 minutes
2025-01-03 18:14:56,396:INFO:SubProcess create_model() called ==================================
2025-01-03 18:14:56,397:INFO:Initializing create_model()
2025-01-03 18:14:56,397:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:14:56,397:INFO:Checking exceptions
2025-01-03 18:14:56,397:INFO:Importing libraries
2025-01-03 18:14:56,397:INFO:Copying training dataset
2025-01-03 18:14:56,561:INFO:Defining folds
2025-01-03 18:14:56,561:INFO:Declaring metric variables
2025-01-03 18:14:56,565:INFO:Importing untrained model
2025-01-03 18:14:56,568:INFO:Extra Trees Classifier Imported successfully
2025-01-03 18:14:56,576:INFO:Starting cross validation
2025-01-03 18:14:56,579:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:16:15,073:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:15,284:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:16,277:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:16,477:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:16,823:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:16:16,931:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:17,017:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:16:17,146:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:17,292:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:17,305:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:17,584:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:17,624:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:17,643:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:17,767:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:17,787:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:17,833:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:16:17,849:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:17,995:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,030:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,032:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:16:18,067:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,187:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,223:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,257:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:16:18,294:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:16:18,327:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,366:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,412:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,445:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:16:18,456:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,526:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:16:18,585:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,637:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,637:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,651:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,802:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:16:18,907:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:18,920:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:19,041:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:16:19,138:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:19,749:INFO:Calculating mean and std
2025-01-03 18:16:19,749:INFO:Creating metrics dataframe
2025-01-03 18:16:19,749:INFO:Uploading results into container
2025-01-03 18:16:19,749:INFO:Uploading model into container now
2025-01-03 18:16:19,749:INFO:_master_model_container: 12
2025-01-03 18:16:19,749:INFO:_display_container: 2
2025-01-03 18:16:19,749:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-03 18:16:19,749:INFO:create_model() successfully completed......................................
2025-01-03 18:16:19,901:INFO:SubProcess create_model() end ==================================
2025-01-03 18:16:19,901:INFO:Creating metrics dataframe
2025-01-03 18:16:19,916:INFO:Initializing Light Gradient Boosting Machine
2025-01-03 18:16:19,916:INFO:Total runtime is 23.339529025554658 minutes
2025-01-03 18:16:19,916:INFO:SubProcess create_model() called ==================================
2025-01-03 18:16:19,924:INFO:Initializing create_model()
2025-01-03 18:16:19,925:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:16:19,925:INFO:Checking exceptions
2025-01-03 18:16:19,925:INFO:Importing libraries
2025-01-03 18:16:19,925:INFO:Copying training dataset
2025-01-03 18:16:20,081:INFO:Defining folds
2025-01-03 18:16:20,081:INFO:Declaring metric variables
2025-01-03 18:16:20,094:INFO:Importing untrained model
2025-01-03 18:16:20,098:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-03 18:16:20,098:INFO:Starting cross validation
2025-01-03 18:16:20,098:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:16:57,911:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:58,290:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:58,665:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:16:59,783:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:00,176:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:00,563:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:02,010:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:02,408:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:02,802:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:04,273:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:04,436:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:04,521:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:04,669:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:04,820:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:04,914:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:05,053:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:05,144:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:05,205:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:05,306:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:07,224:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:07,284:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:07,604:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:07,680:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:08,118:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:08,154:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:08,180:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:08,321:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:08,404:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:08,544:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:08,627:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:08,753:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:09,365:INFO:Calculating mean and std
2025-01-03 18:17:09,366:INFO:Creating metrics dataframe
2025-01-03 18:17:09,367:INFO:Uploading results into container
2025-01-03 18:17:09,367:INFO:Uploading model into container now
2025-01-03 18:17:09,367:INFO:_master_model_container: 13
2025-01-03 18:17:09,367:INFO:_display_container: 2
2025-01-03 18:17:09,367:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-03 18:17:09,367:INFO:create_model() successfully completed......................................
2025-01-03 18:17:09,515:INFO:SubProcess create_model() end ==================================
2025-01-03 18:17:09,527:INFO:Creating metrics dataframe
2025-01-03 18:17:09,534:INFO:Initializing Dummy Classifier
2025-01-03 18:17:09,534:INFO:Total runtime is 24.16650051275889 minutes
2025-01-03 18:17:09,537:INFO:SubProcess create_model() called ==================================
2025-01-03 18:17:09,539:INFO:Initializing create_model()
2025-01-03 18:17:09,539:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002401E863970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:17:09,539:INFO:Checking exceptions
2025-01-03 18:17:09,539:INFO:Importing libraries
2025-01-03 18:17:09,539:INFO:Copying training dataset
2025-01-03 18:17:09,683:INFO:Defining folds
2025-01-03 18:17:09,683:INFO:Declaring metric variables
2025-01-03 18:17:09,695:INFO:Importing untrained model
2025-01-03 18:17:09,699:INFO:Dummy Classifier Imported successfully
2025-01-03 18:17:09,700:INFO:Starting cross validation
2025-01-03 18:17:09,705:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:17:21,939:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:22,203:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:22,248:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:22,359:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:22,485:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:22,505:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:22,662:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:22,773:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:23,272:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:23,495:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:23,636:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:23,732:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:23,733:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:23,977:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:24,110:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:24,205:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:24,429:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:24,664:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:24,788:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:24,819:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:24,886:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:25,038:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:25,164:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:25,261:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:25,580:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:25,813:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:25,940:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:26,024:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:26,050:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:26,279:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:26,398:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:26,439:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:26,496:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:26,675:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:26,735:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:26,801:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:26,897:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:26,939:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:27,064:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:27,147:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:27,549:INFO:Calculating mean and std
2025-01-03 18:17:27,549:INFO:Creating metrics dataframe
2025-01-03 18:17:27,552:INFO:Uploading results into container
2025-01-03 18:17:27,552:INFO:Uploading model into container now
2025-01-03 18:17:27,552:INFO:_master_model_container: 14
2025-01-03 18:17:27,552:INFO:_display_container: 2
2025-01-03 18:17:27,552:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-03 18:17:27,552:INFO:create_model() successfully completed......................................
2025-01-03 18:17:27,703:INFO:SubProcess create_model() end ==================================
2025-01-03 18:17:27,703:INFO:Creating metrics dataframe
2025-01-03 18:17:27,716:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-03 18:17:27,725:INFO:Initializing create_model()
2025-01-03 18:17:27,725:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:17:27,725:INFO:Checking exceptions
2025-01-03 18:17:27,725:INFO:Importing libraries
2025-01-03 18:17:27,725:INFO:Copying training dataset
2025-01-03 18:17:27,883:INFO:Defining folds
2025-01-03 18:17:27,883:INFO:Declaring metric variables
2025-01-03 18:17:27,883:INFO:Importing untrained model
2025-01-03 18:17:27,883:INFO:Declaring custom model
2025-01-03 18:17:27,883:INFO:K Neighbors Classifier Imported successfully
2025-01-03 18:17:27,886:INFO:Cross validation set to False
2025-01-03 18:17:27,886:INFO:Fitting Model
2025-01-03 18:17:34,410:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-03 18:17:34,410:INFO:create_model() successfully completed......................................
2025-01-03 18:17:34,598:INFO:_master_model_container: 14
2025-01-03 18:17:34,598:INFO:_display_container: 2
2025-01-03 18:17:34,598:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-03 18:17:34,598:INFO:compare_models() successfully completed......................................
2025-01-03 18:17:34,637:INFO:Initializing create_model()
2025-01-03 18:17:34,637:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:17:34,637:INFO:Checking exceptions
2025-01-03 18:17:34,650:INFO:Importing libraries
2025-01-03 18:17:34,650:INFO:Copying training dataset
2025-01-03 18:17:34,811:INFO:Defining folds
2025-01-03 18:17:34,811:INFO:Declaring metric variables
2025-01-03 18:17:34,818:INFO:Importing untrained model
2025-01-03 18:17:34,818:INFO:Declaring custom model
2025-01-03 18:17:34,818:INFO:K Neighbors Classifier Imported successfully
2025-01-03 18:17:34,826:INFO:Starting cross validation
2025-01-03 18:17:34,826:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:17:52,067:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:52,235:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:52,443:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:52,518:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:52,609:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:52,673:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:52,784:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:52,891:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:53,419:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:53,820:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:54,030:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:54,149:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:54,190:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:54,481:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:54,647:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:54,678:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:54,752:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:55,087:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:55,390:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:55,481:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:55,510:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:55,717:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:55,845:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:55,991:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:56,386:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:56,481:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:56,608:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:56,721:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:56,809:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:56,897:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:56,925:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:57,003:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:57,151:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:57,344:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:57,356:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:57,481:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:57,550:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:57,579:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:57,675:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:17:57,772:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:17:58,161:INFO:Calculating mean and std
2025-01-03 18:17:58,161:INFO:Creating metrics dataframe
2025-01-03 18:17:58,161:INFO:Finalizing model
2025-01-03 18:18:04,738:INFO:Uploading results into container
2025-01-03 18:18:04,739:INFO:Uploading model into container now
2025-01-03 18:18:04,751:INFO:_master_model_container: 15
2025-01-03 18:18:04,751:INFO:_display_container: 3
2025-01-03 18:18:04,751:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-03 18:18:04,753:INFO:create_model() successfully completed......................................
2025-01-03 18:18:04,944:INFO:Initializing tune_model()
2025-01-03 18:18:04,944:INFO:tune_model(estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>)
2025-01-03 18:18:04,949:INFO:Checking exceptions
2025-01-03 18:18:05,023:INFO:Copying training dataset
2025-01-03 18:18:05,134:INFO:Checking base model
2025-01-03 18:18:05,134:INFO:Base model : K Neighbors Classifier
2025-01-03 18:18:05,134:INFO:Declaring metric variables
2025-01-03 18:18:05,134:INFO:Defining Hyperparameters
2025-01-03 18:18:05,285:INFO:Tuning with n_jobs=-1
2025-01-03 18:18:05,285:INFO:Initializing RandomizedSearchCV
2025-01-03 18:21:01,291:INFO:best_params: {'actual_estimator__weights': 'distance', 'actual_estimator__n_neighbors': 42, 'actual_estimator__metric': 'minkowski'}
2025-01-03 18:21:01,291:INFO:Hyperparameter search completed
2025-01-03 18:21:01,291:INFO:SubProcess create_model() called ==================================
2025-01-03 18:21:01,291:INFO:Initializing create_model()
2025-01-03 18:21:01,291:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024025E3BFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'weights': 'distance', 'n_neighbors': 42, 'metric': 'minkowski'})
2025-01-03 18:21:01,291:INFO:Checking exceptions
2025-01-03 18:21:01,291:INFO:Importing libraries
2025-01-03 18:21:01,291:INFO:Copying training dataset
2025-01-03 18:21:01,458:INFO:Defining folds
2025-01-03 18:21:01,458:INFO:Declaring metric variables
2025-01-03 18:21:01,461:INFO:Importing untrained model
2025-01-03 18:21:01,461:INFO:Declaring custom model
2025-01-03 18:21:01,465:INFO:K Neighbors Classifier Imported successfully
2025-01-03 18:21:01,470:INFO:Starting cross validation
2025-01-03 18:21:01,473:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:21:18,018:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:18,508:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:18,593:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:18,803:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:19,009:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:19,221:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:19,486:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:19,756:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:20,113:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:20,463:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:20,522:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:20,764:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:20,909:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:20,977:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:21,226:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:21,489:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:22,058:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:22,338:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:22,384:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:22,570:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:22,793:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:22,814:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:23,065:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:23,120:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:23,167:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:23,387:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:23,578:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:23,814:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:24,455:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:24,824:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:24,876:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:24,938:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:25,078:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:25,157:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:25,325:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:25,421:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:25,591:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:25,798:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:25,921:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:26,004:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:26,497:INFO:Calculating mean and std
2025-01-03 18:21:26,497:INFO:Creating metrics dataframe
2025-01-03 18:21:26,497:INFO:Finalizing model
2025-01-03 18:21:32,943:INFO:Uploading results into container
2025-01-03 18:21:32,949:INFO:Uploading model into container now
2025-01-03 18:21:32,949:INFO:_master_model_container: 16
2025-01-03 18:21:32,949:INFO:_display_container: 4
2025-01-03 18:21:32,950:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance')
2025-01-03 18:21:32,950:INFO:create_model() successfully completed......................................
2025-01-03 18:21:33,106:INFO:SubProcess create_model() end ==================================
2025-01-03 18:21:33,106:INFO:choose_better activated
2025-01-03 18:21:33,109:INFO:SubProcess create_model() called ==================================
2025-01-03 18:21:33,109:INFO:Initializing create_model()
2025-01-03 18:21:33,110:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:21:33,110:INFO:Checking exceptions
2025-01-03 18:21:33,111:INFO:Importing libraries
2025-01-03 18:21:33,111:INFO:Copying training dataset
2025-01-03 18:21:33,250:INFO:Defining folds
2025-01-03 18:21:33,250:INFO:Declaring metric variables
2025-01-03 18:21:33,250:INFO:Importing untrained model
2025-01-03 18:21:33,250:INFO:Declaring custom model
2025-01-03 18:21:33,250:INFO:K Neighbors Classifier Imported successfully
2025-01-03 18:21:33,250:INFO:Starting cross validation
2025-01-03 18:21:33,265:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:21:50,337:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:50,731:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:50,741:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:51,012:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:51,198:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:51,234:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:51,338:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:51,338:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:51,451:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:51,793:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:52,079:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:52,194:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:52,397:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:52,636:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:52,865:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:53,089:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:53,157:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:53,490:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:53,670:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:53,723:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:53,926:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:54,079:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:54,178:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:54,255:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:54,411:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:54,521:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:54,572:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:54,673:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:54,768:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:54,842:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:55,007:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:55,104:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:55,156:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:55,385:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:55,559:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:55,647:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:55,700:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:55,907:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:56,037:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:21:56,118:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:21:56,499:INFO:Calculating mean and std
2025-01-03 18:21:56,499:INFO:Creating metrics dataframe
2025-01-03 18:21:56,502:INFO:Finalizing model
2025-01-03 18:22:02,941:INFO:Uploading results into container
2025-01-03 18:22:02,941:INFO:Uploading model into container now
2025-01-03 18:22:02,942:INFO:_master_model_container: 17
2025-01-03 18:22:02,942:INFO:_display_container: 5
2025-01-03 18:22:02,942:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-03 18:22:02,942:INFO:create_model() successfully completed......................................
2025-01-03 18:22:03,088:INFO:SubProcess create_model() end ==================================
2025-01-03 18:22:03,088:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform') result for Accuracy is 0.6762
2025-01-03 18:22:03,088:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance') result for Accuracy is 0.7027
2025-01-03 18:22:03,088:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance') is best model
2025-01-03 18:22:03,088:INFO:choose_better completed
2025-01-03 18:22:03,104:INFO:_master_model_container: 17
2025-01-03 18:22:03,104:INFO:_display_container: 4
2025-01-03 18:22:03,104:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance')
2025-01-03 18:22:03,104:INFO:tune_model() successfully completed......................................
2025-01-03 18:22:03,291:INFO:Initializing finalize_model()
2025-01-03 18:22:03,291:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-01-03 18:22:03,291:INFO:Finalizing KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance')
2025-01-03 18:22:03,352:INFO:Initializing create_model()
2025-01-03 18:22:03,352:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:22:03,352:INFO:Checking exceptions
2025-01-03 18:22:03,353:INFO:Importing libraries
2025-01-03 18:22:03,353:INFO:Copying training dataset
2025-01-03 18:22:03,364:INFO:Defining folds
2025-01-03 18:22:03,364:INFO:Declaring metric variables
2025-01-03 18:22:03,365:INFO:Importing untrained model
2025-01-03 18:22:03,365:INFO:Declaring custom model
2025-01-03 18:22:03,365:INFO:K Neighbors Classifier Imported successfully
2025-01-03 18:22:03,368:INFO:Cross validation set to False
2025-01-03 18:22:03,368:INFO:Fitting Model
2025-01-03 18:22:12,705:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['duration', 'start_lat',
                                             'start_lon', 'end_lat', 'end_lon',
                                             'start_station', 'end_station'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=Tru...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False)
2025-01-03 18:22:12,705:INFO:create_model() successfully completed......................................
2025-01-03 18:22:12,857:INFO:_master_model_container: 17
2025-01-03 18:22:12,863:INFO:_display_container: 4
2025-01-03 18:22:12,871:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['duration', 'start_lat',
                                             'start_lon', 'end_lat', 'end_lon',
                                             'start_station', 'end_station'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=Tru...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False)
2025-01-03 18:22:12,871:INFO:finalize_model() successfully completed......................................
2025-01-03 18:22:13,052:INFO:Initializing save_model()
2025-01-03 18:22:13,052:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['duration', 'start_lat',
                                             'start_lon', 'end_lat', 'end_lon',
                                             'start_station', 'end_station'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=Tru...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False), model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['duration', 'start_lat',
                                             'start_lon', 'end_lat', 'end_lon',
                                             'start_station', 'end_station'],
                                    transformer=Si...
                                    transformer=TargetEncoder(cols=['start_time',
                                                                    'end_time',
                                                                    'bike_id'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-01-03 18:22:13,052:INFO:Adding model into prep_pipe
2025-01-03 18:22:13,052:WARNING:Only Model saved as it was a pipeline.
2025-01-03 18:22:13,761:INFO:C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model.pkl saved in current working directory
2025-01-03 18:22:13,775:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['duration', 'start_lat',
                                             'start_lon', 'end_lat', 'end_lon',
                                             'start_station', 'end_station'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=Tru...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False)
2025-01-03 18:22:13,775:INFO:save_model() successfully completed......................................
2025-01-03 18:22:13,941:INFO:Initializing load_model()
2025-01-03 18:22:13,941:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model, platform=None, authentication=None, verbose=True)
2025-01-03 18:22:14,332:INFO:Initializing predict_model()
2025-01-03 18:22:14,332:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['duration', 'start_lat',
                                             'start_lon', 'end_lat', 'end_lon',
                                             'start_station', 'end_station'],
                                    transformer=Si...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023F98D4E4D0>)
2025-01-03 18:22:14,332:INFO:Checking exceptions
2025-01-03 18:22:14,332:INFO:Preloading libraries
2025-01-03 18:22:24,618:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:22:25,632:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:22:26,653:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:22:28,290:INFO:Initializing plot_model()
2025-01-03 18:22:28,290:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['duration', 'start_lat',
                                             'start_lon', 'end_lat', 'end_lon',
                                             'start_station', 'end_station'],
                                    transformer=Si...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, system=True)
2025-01-03 18:22:28,295:INFO:Checking exceptions
2025-01-03 18:23:44,214:INFO:Initializing plot_model()
2025-01-03 18:23:44,214:INFO:plot_model(plot=error, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['duration', 'start_lat',
                                             'start_lon', 'end_lat', 'end_lon',
                                             'start_station', 'end_station'],
                                    transformer=Si...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, system=True)
2025-01-03 18:23:44,214:INFO:Checking exceptions
2025-01-03 18:23:44,274:INFO:Preloading libraries
2025-01-03 18:23:44,295:INFO:Copying training dataset
2025-01-03 18:23:44,295:INFO:Plot type: error
2025-01-03 18:23:54,146:INFO:Fitting Model
2025-01-03 18:23:54,146:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but KNeighborsClassifier was fitted with feature names
  warnings.warn(

2025-01-03 18:23:54,160:INFO:Scoring test/hold-out set
2025-01-03 18:23:58,846:INFO:Visual Rendered Successfully
2025-01-03 18:23:59,092:INFO:plot_model() successfully completed......................................
2025-01-03 18:23:59,129:INFO:Initializing evaluate_model()
2025-01-03 18:23:59,129:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['duration', 'start_lat',
                                             'start_lon', 'end_lat', 'end_lon',
                                             'start_station', 'end_station'],
                                    transformer=Si...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-03 18:23:59,220:INFO:Initializing plot_model()
2025-01-03 18:23:59,220:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['duration', 'start_lat',
                                             'start_lon', 'end_lat', 'end_lon',
                                             'start_station', 'end_station'],
                                    transformer=Si...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, system=True)
2025-01-03 18:23:59,220:INFO:Checking exceptions
2025-01-03 18:23:59,279:INFO:Preloading libraries
2025-01-03 18:23:59,292:INFO:Copying training dataset
2025-01-03 18:23:59,292:INFO:Plot type: pipeline
2025-01-03 18:23:59,460:INFO:Visual Rendered Successfully
2025-01-03 18:23:59,613:INFO:plot_model() successfully completed......................................
2025-01-03 18:23:59,651:INFO:Initializing compare_models()
2025-01-03 18:23:59,651:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-03 18:23:59,651:INFO:Checking exceptions
2025-01-03 18:23:59,712:INFO:Preparing display monitor
2025-01-03 18:23:59,734:INFO:Initializing Logistic Regression
2025-01-03 18:23:59,734:INFO:Total runtime is 0.0 minutes
2025-01-03 18:23:59,737:INFO:SubProcess create_model() called ==================================
2025-01-03 18:23:59,737:INFO:Initializing create_model()
2025-01-03 18:23:59,737:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F91B28B80>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F90ADCE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:23:59,737:INFO:Checking exceptions
2025-01-03 18:23:59,737:INFO:Importing libraries
2025-01-03 18:23:59,738:INFO:Copying training dataset
2025-01-03 18:23:59,923:INFO:Defining folds
2025-01-03 18:23:59,923:INFO:Declaring metric variables
2025-01-03 18:23:59,925:INFO:Importing untrained model
2025-01-03 18:23:59,929:INFO:Logistic Regression Imported successfully
2025-01-03 18:23:59,932:INFO:Starting cross validation
2025-01-03 18:23:59,932:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:24:59,854:WARNING:C:\Users\jacj2\AppData\Local\Temp\ipykernel_15844\2316916227.py:1: DtypeWarning: Columns (8) have mixed types. Specify dtype option on import or set low_memory=False.
  test=pd.read_csv(r"../data/test_set.csv")

2025-01-03 18:25:01,018:INFO:Initializing load_model()
2025-01-03 18:25:01,018:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\Scripts\model, platform=None, authentication=None, verbose=True)
2025-01-03 18:26:03,373:INFO:PyCaret ClassificationExperiment
2025-01-03 18:26:03,373:INFO:Logging name: clf-default-name
2025-01-03 18:26:03,373:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-03 18:26:03,373:INFO:version 3.3.2
2025-01-03 18:26:03,373:INFO:Initializing setup()
2025-01-03 18:26:03,373:INFO:self.USI: 8d2c
2025-01-03 18:26:03,373:INFO:self._variable_keys: {'log_plots_param', 'y_test', 'X_train', '_ml_usecase', 'exp_name_log', 'fold_shuffle_param', 'is_multiclass', 'fold_groups_param', 'y', 'fold_generator', 'USI', 'logging_param', 'data', 'X', 'seed', 'target_param', 'memory', 'n_jobs_param', 'pipeline', 'y_train', '_available_plots', 'gpu_n_jobs_param', 'fix_imbalance', 'html_param', 'gpu_param', 'idx', 'exp_id', 'X_test'}
2025-01-03 18:26:03,373:INFO:Checking environment
2025-01-03 18:26:03,373:INFO:python_version: 3.10.15
2025-01-03 18:26:03,373:INFO:python_build: ('main', 'Oct  3 2024 07:22:19')
2025-01-03 18:26:03,373:INFO:machine: AMD64
2025-01-03 18:26:03,373:INFO:platform: Windows-10-10.0.26100-SP0
2025-01-03 18:26:03,378:INFO:Memory: svmem(total=25439199232, available=15465705472, percent=39.2, used=9973493760, free=15465705472)
2025-01-03 18:26:03,378:INFO:Physical Core: 8
2025-01-03 18:26:03,378:INFO:Logical Core: 16
2025-01-03 18:26:03,378:INFO:Checking libraries
2025-01-03 18:26:03,378:INFO:System:
2025-01-03 18:26:03,378:INFO:    python: 3.10.15 | packaged by Anaconda, Inc. | (main, Oct  3 2024, 07:22:19) [MSC v.1929 64 bit (AMD64)]
2025-01-03 18:26:03,378:INFO:executable: c:\Users\jacj2\anaconda3\envs\tensor_gpu1\python.exe
2025-01-03 18:26:03,378:INFO:   machine: Windows-10-10.0.26100-SP0
2025-01-03 18:26:03,378:INFO:PyCaret required dependencies:
2025-01-03 18:26:03,378:INFO:                 pip: 24.2
2025-01-03 18:26:03,378:INFO:          setuptools: 75.1.0
2025-01-03 18:26:03,378:INFO:             pycaret: 3.3.2
2025-01-03 18:26:03,378:INFO:             IPython: 8.30.0
2025-01-03 18:26:03,378:INFO:          ipywidgets: 8.1.5
2025-01-03 18:26:03,378:INFO:                tqdm: 4.67.1
2025-01-03 18:26:03,378:INFO:               numpy: 1.26.4
2025-01-03 18:26:03,378:INFO:              pandas: 2.1.4
2025-01-03 18:26:03,378:INFO:              jinja2: 3.1.5
2025-01-03 18:26:03,378:INFO:               scipy: 1.11.4
2025-01-03 18:26:03,378:INFO:              joblib: 1.3.2
2025-01-03 18:26:03,378:INFO:             sklearn: 1.4.2
2025-01-03 18:26:03,378:INFO:                pyod: 2.0.3
2025-01-03 18:26:03,378:INFO:            imblearn: 0.13.0
2025-01-03 18:26:03,378:INFO:   category_encoders: 2.6.4
2025-01-03 18:26:03,378:INFO:            lightgbm: 4.5.0
2025-01-03 18:26:03,378:INFO:               numba: 0.60.0
2025-01-03 18:26:03,378:INFO:            requests: 2.32.3
2025-01-03 18:26:03,378:INFO:          matplotlib: 3.7.5
2025-01-03 18:26:03,378:INFO:          scikitplot: 0.3.7
2025-01-03 18:26:03,378:INFO:         yellowbrick: 1.5
2025-01-03 18:26:03,378:INFO:              plotly: 5.24.1
2025-01-03 18:26:03,378:INFO:    plotly-resampler: Not installed
2025-01-03 18:26:03,378:INFO:             kaleido: 0.2.1
2025-01-03 18:26:03,378:INFO:           schemdraw: 0.15
2025-01-03 18:26:03,378:INFO:         statsmodels: 0.14.4
2025-01-03 18:26:03,378:INFO:              sktime: 0.26.0
2025-01-03 18:26:03,378:INFO:               tbats: 1.1.3
2025-01-03 18:26:03,378:INFO:            pmdarima: 2.0.4
2025-01-03 18:26:03,378:INFO:              psutil: 6.1.0
2025-01-03 18:26:03,378:INFO:          markupsafe: 3.0.2
2025-01-03 18:26:03,378:INFO:             pickle5: Not installed
2025-01-03 18:26:03,378:INFO:         cloudpickle: 3.1.0
2025-01-03 18:26:03,378:INFO:         deprecation: 2.1.0
2025-01-03 18:26:03,379:INFO:              xxhash: 3.5.0
2025-01-03 18:26:03,379:INFO:           wurlitzer: Not installed
2025-01-03 18:26:03,379:INFO:PyCaret optional dependencies:
2025-01-03 18:26:03,379:INFO:                shap: 0.46.0
2025-01-03 18:26:03,379:INFO:           interpret: Not installed
2025-01-03 18:26:03,379:INFO:                umap: Not installed
2025-01-03 18:26:03,379:INFO:     ydata_profiling: Not installed
2025-01-03 18:26:03,379:INFO:  explainerdashboard: Not installed
2025-01-03 18:26:03,379:INFO:             autoviz: Not installed
2025-01-03 18:26:03,379:INFO:           fairlearn: Not installed
2025-01-03 18:26:03,379:INFO:          deepchecks: Not installed
2025-01-03 18:26:03,379:INFO:             xgboost: Not installed
2025-01-03 18:26:03,379:INFO:            catboost: Not installed
2025-01-03 18:26:03,379:INFO:              kmodes: Not installed
2025-01-03 18:26:03,379:INFO:             mlxtend: Not installed
2025-01-03 18:26:03,379:INFO:       statsforecast: Not installed
2025-01-03 18:26:03,379:INFO:        tune_sklearn: Not installed
2025-01-03 18:26:03,380:INFO:                 ray: Not installed
2025-01-03 18:26:03,380:INFO:            hyperopt: Not installed
2025-01-03 18:26:03,380:INFO:              optuna: Not installed
2025-01-03 18:26:03,380:INFO:               skopt: Not installed
2025-01-03 18:26:03,380:INFO:              mlflow: Not installed
2025-01-03 18:26:03,380:INFO:              gradio: Not installed
2025-01-03 18:26:03,380:INFO:             fastapi: Not installed
2025-01-03 18:26:03,380:INFO:             uvicorn: Not installed
2025-01-03 18:26:03,380:INFO:              m2cgen: Not installed
2025-01-03 18:26:03,380:INFO:           evidently: Not installed
2025-01-03 18:26:03,380:INFO:               fugue: Not installed
2025-01-03 18:26:03,380:INFO:           streamlit: Not installed
2025-01-03 18:26:03,380:INFO:             prophet: Not installed
2025-01-03 18:26:03,380:INFO:None
2025-01-03 18:26:03,380:INFO:Set up data.
2025-01-03 18:26:05,406:INFO:Set up folding strategy.
2025-01-03 18:26:05,406:INFO:Set up train/test split.
2025-01-03 18:26:06,364:INFO:Set up index.
2025-01-03 18:26:06,378:INFO:Assigning column types.
2025-01-03 18:26:06,461:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-03 18:26:06,504:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-03 18:26:06,504:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 18:26:06,522:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:06,522:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:06,558:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-03 18:26:06,558:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 18:26:06,572:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:06,572:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:06,572:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-03 18:26:06,600:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 18:26:06,629:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:06,629:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:06,656:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 18:26:06,684:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:06,684:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:06,684:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-03 18:26:06,740:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:06,740:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:06,794:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:06,794:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:06,795:INFO:Preparing preprocessing pipeline...
2025-01-03 18:26:06,810:INFO:Set up label encoding.
2025-01-03 18:26:06,810:INFO:Set up simple imputation.
2025-01-03 18:26:06,877:INFO:Set up encoding of ordinal features.
2025-01-03 18:26:06,905:INFO:Set up encoding of categorical features.
2025-01-03 18:26:06,905:INFO:Set up removing multicollinearity.
2025-01-03 18:26:18,775:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:256: UserWarning: Persisting input arguments took 1.50s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2025-01-03 18:26:18,818:INFO:Finished creating preprocessing pipeline.
2025-01-03 18:26:18,837:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['duration', 'start_lat',
                                             'start_lon', 'end_lat', 'end_lon',
                                             'start_station', 'end_station'],
                                    transformer=Si...
                                    transformer=TargetEncoder(cols=['start_time',
                                                                    'end_time',
                                                                    'bike_id'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95)))],
         verbose=False)
2025-01-03 18:26:18,837:INFO:Creating final display dataframe.
2025-01-03 18:26:28,259:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 2.24s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_full_transform(

2025-01-03 18:26:35,962:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 1.12s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 18:26:37,761:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 1.75s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_full_transform(

2025-01-03 18:26:41,460:INFO:Setup _display_container:                     Description  \
0                    Session id   
1                        Target   
2                   Target type   
3                Target mapping   
4           Original data shape   
5        Transformed data shape   
6   Transformed train set shape   
7    Transformed test set shape   
8              Numeric features   
9          Categorical features   
10                   Preprocess   
11              Imputation type   
12           Numeric imputation   
13       Categorical imputation   
14     Maximum one-hot encoding   
15              Encoding method   
16     Remove multicollinearity   
17  Multicollinearity threshold   
18               Fold Generator   
19                  Fold Number   
20                     CPU Jobs   
21                      Use GPU   
22               Log Experiment   
23              Experiment Name   
24                          USI   

                                                Value  
0                                                 123  
1                                     passholder_type  
2                                          Multiclass  
3   Annual Pass: 0, Flex Pass: 1, Monthly Pass: 2,...  
4                                        (675626, 12)  
5                                        (675626, 10)  
6                                        (472938, 10)  
7                                        (202688, 10)  
8                                                   7  
9                                                   4  
10                                               True  
11                                             simple  
12                                               mean  
13                                               mode  
14                                                 25  
15                                               None  
16                                               True  
17                                               0.95  
18                                    StratifiedKFold  
19                                                 10  
20                                                 -1  
21                                              False  
22                                              False  
23                                   clf-default-name  
24                                               8d2c  
2025-01-03 18:26:41,523:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:41,524:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:41,576:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:41,576:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:26:41,576:INFO:setup() successfully completed in 38.21s...............
2025-01-03 18:26:41,576:INFO:Initializing compare_models()
2025-01-03 18:26:41,576:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-03 18:26:41,576:INFO:Checking exceptions
2025-01-03 18:26:41,668:INFO:Preparing display monitor
2025-01-03 18:26:41,688:INFO:Initializing Logistic Regression
2025-01-03 18:26:41,688:INFO:Total runtime is 0.0 minutes
2025-01-03 18:26:41,691:INFO:SubProcess create_model() called ==================================
2025-01-03 18:26:41,691:INFO:Initializing create_model()
2025-01-03 18:26:41,691:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:26:41,691:INFO:Checking exceptions
2025-01-03 18:26:41,691:INFO:Importing libraries
2025-01-03 18:26:41,691:INFO:Copying training dataset
2025-01-03 18:26:41,864:INFO:Defining folds
2025-01-03 18:26:41,864:INFO:Declaring metric variables
2025-01-03 18:26:41,864:INFO:Importing untrained model
2025-01-03 18:26:41,871:INFO:Logistic Regression Imported successfully
2025-01-03 18:26:41,878:INFO:Starting cross validation
2025-01-03 18:26:41,882:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:28:58,012:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 18:28:58,066:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 18:28:58,610:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 18:28:59,002:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:28:59,082:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:28:59,123:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 18:28:59,147:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:28:59,227:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:28:59,461:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:28:59,497:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:28:59,540:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:28:59,616:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:28:59,699:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:28:59,718:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:28:59,855:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:28:59,862:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:28:59,898:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:28:59,907:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:00,035:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:00,096:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:00,161:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 18:29:00,223:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:00,397:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:00,602:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:00,740:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:00,877:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:29:00,986:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:01,124:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 18:29:01,323:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:01,508:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:01,537:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 18:29:01,622:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:01,697:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:29:01,799:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:02,040:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:29:02,108:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:02,148:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:02,182:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 18:29:02,285:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:02,396:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:02,396:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:02,537:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:02,608:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:29:02,637:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 18:29:02,649:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:02,715:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:02,992:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:03,059:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:29:03,117:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:03,205:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:03,205:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:03,340:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 18:29:03,537:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:03,687:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:03,735:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:29:03,816:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:03,868:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:04,191:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:04,352:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:04,436:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:04,827:INFO:Calculating mean and std
2025-01-03 18:29:04,827:INFO:Creating metrics dataframe
2025-01-03 18:29:04,827:INFO:Uploading results into container
2025-01-03 18:29:04,827:INFO:Uploading model into container now
2025-01-03 18:29:04,827:INFO:_master_model_container: 1
2025-01-03 18:29:04,827:INFO:_display_container: 2
2025-01-03 18:29:04,827:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-03 18:29:04,827:INFO:create_model() successfully completed......................................
2025-01-03 18:29:05,045:INFO:SubProcess create_model() end ==================================
2025-01-03 18:29:05,045:INFO:Creating metrics dataframe
2025-01-03 18:29:05,051:INFO:Initializing K Neighbors Classifier
2025-01-03 18:29:05,051:INFO:Total runtime is 2.3893978198369346 minutes
2025-01-03 18:29:05,056:INFO:SubProcess create_model() called ==================================
2025-01-03 18:29:05,056:INFO:Initializing create_model()
2025-01-03 18:29:05,056:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:29:05,056:INFO:Checking exceptions
2025-01-03 18:29:05,056:INFO:Importing libraries
2025-01-03 18:29:05,057:INFO:Copying training dataset
2025-01-03 18:29:05,242:INFO:Defining folds
2025-01-03 18:29:05,242:INFO:Declaring metric variables
2025-01-03 18:29:05,244:INFO:Importing untrained model
2025-01-03 18:29:05,250:INFO:K Neighbors Classifier Imported successfully
2025-01-03 18:29:05,256:INFO:Starting cross validation
2025-01-03 18:29:05,261:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:29:27,483:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:27,720:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:27,950:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:28,223:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:28,225:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:28,278:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:28,368:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:28,429:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:28,496:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:28,643:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:28,647:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:28,673:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:28,829:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:28,832:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:28,934:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:28,978:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:28,985:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:29,124:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:29,267:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:29,351:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:29,416:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:29,430:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:29,503:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:29,642:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:29,690:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:29,792:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:29,886:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:29,922:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:30,064:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:30,134:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:30,231:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:30,245:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:30,248:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:30,374:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:30,379:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:30,425:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:30,560:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:30,703:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:30,864:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:29:30,970:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:31,342:INFO:Calculating mean and std
2025-01-03 18:29:31,342:INFO:Creating metrics dataframe
2025-01-03 18:29:31,342:INFO:Uploading results into container
2025-01-03 18:29:31,342:INFO:Uploading model into container now
2025-01-03 18:29:31,342:INFO:_master_model_container: 2
2025-01-03 18:29:31,342:INFO:_display_container: 2
2025-01-03 18:29:31,342:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-03 18:29:31,342:INFO:create_model() successfully completed......................................
2025-01-03 18:29:31,520:INFO:SubProcess create_model() end ==================================
2025-01-03 18:29:31,520:INFO:Creating metrics dataframe
2025-01-03 18:29:31,526:INFO:Initializing Naive Bayes
2025-01-03 18:29:31,526:INFO:Total runtime is 2.8306458751360575 minutes
2025-01-03 18:29:31,531:INFO:SubProcess create_model() called ==================================
2025-01-03 18:29:31,531:INFO:Initializing create_model()
2025-01-03 18:29:31,531:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:29:31,531:INFO:Checking exceptions
2025-01-03 18:29:31,531:INFO:Importing libraries
2025-01-03 18:29:31,531:INFO:Copying training dataset
2025-01-03 18:29:31,703:INFO:Defining folds
2025-01-03 18:29:31,703:INFO:Declaring metric variables
2025-01-03 18:29:31,707:INFO:Importing untrained model
2025-01-03 18:29:31,711:INFO:Naive Bayes Imported successfully
2025-01-03 18:29:31,717:INFO:Starting cross validation
2025-01-03 18:29:31,721:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:29:44,746:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:45,069:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:45,354:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:45,392:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:45,724:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:45,988:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:46,009:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:46,308:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:46,599:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:46,683:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:46,981:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:47,277:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:47,296:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:47,574:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:47,855:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:47,894:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:48,168:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:48,440:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:48,621:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:48,904:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:49,098:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:49,185:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:49,395:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:49,725:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:49,732:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:49,987:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:50,239:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:50,311:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:50,585:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:50,875:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:29:51,265:INFO:Calculating mean and std
2025-01-03 18:29:51,266:INFO:Creating metrics dataframe
2025-01-03 18:29:51,267:INFO:Uploading results into container
2025-01-03 18:29:51,267:INFO:Uploading model into container now
2025-01-03 18:29:51,267:INFO:_master_model_container: 3
2025-01-03 18:29:51,267:INFO:_display_container: 2
2025-01-03 18:29:51,267:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-03 18:29:51,267:INFO:create_model() successfully completed......................................
2025-01-03 18:29:51,431:INFO:SubProcess create_model() end ==================================
2025-01-03 18:29:51,431:INFO:Creating metrics dataframe
2025-01-03 18:29:51,445:INFO:Initializing Decision Tree Classifier
2025-01-03 18:29:51,445:INFO:Total runtime is 3.162615470091502 minutes
2025-01-03 18:29:51,445:INFO:SubProcess create_model() called ==================================
2025-01-03 18:29:51,445:INFO:Initializing create_model()
2025-01-03 18:29:51,445:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:29:51,445:INFO:Checking exceptions
2025-01-03 18:29:51,445:INFO:Importing libraries
2025-01-03 18:29:51,445:INFO:Copying training dataset
2025-01-03 18:29:51,626:INFO:Defining folds
2025-01-03 18:29:51,626:INFO:Declaring metric variables
2025-01-03 18:29:51,640:INFO:Importing untrained model
2025-01-03 18:29:51,643:INFO:Decision Tree Classifier Imported successfully
2025-01-03 18:29:51,643:INFO:Starting cross validation
2025-01-03 18:29:51,651:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:30:07,844:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:07,958:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:08,122:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:08,243:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:08,424:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:30:08,454:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:08,567:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:08,905:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:09,187:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:09,368:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:30:09,401:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:09,509:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:09,717:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:09,913:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:30:10,050:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:10,117:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:10,329:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:10,464:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:10,633:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:10,662:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:30:10,783:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:30:10,783:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:10,911:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:10,914:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:11,242:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:11,258:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:11,563:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:11,604:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:11,689:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:30:11,703:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:11,823:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:11,995:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:12,076:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:12,159:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:30:12,279:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:12,345:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:12,463:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:30:12,548:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:30:12,936:INFO:Calculating mean and std
2025-01-03 18:30:12,936:INFO:Creating metrics dataframe
2025-01-03 18:30:12,936:INFO:Uploading results into container
2025-01-03 18:30:12,936:INFO:Uploading model into container now
2025-01-03 18:30:12,936:INFO:_master_model_container: 4
2025-01-03 18:30:12,936:INFO:_display_container: 2
2025-01-03 18:30:12,936:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-03 18:30:12,936:INFO:create_model() successfully completed......................................
2025-01-03 18:30:13,102:INFO:SubProcess create_model() end ==================================
2025-01-03 18:30:13,102:INFO:Creating metrics dataframe
2025-01-03 18:30:13,117:INFO:Initializing SVM - Linear Kernel
2025-01-03 18:30:13,117:INFO:Total runtime is 3.5238296349843345 minutes
2025-01-03 18:30:13,117:INFO:SubProcess create_model() called ==================================
2025-01-03 18:30:13,117:INFO:Initializing create_model()
2025-01-03 18:30:13,117:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:30:13,117:INFO:Checking exceptions
2025-01-03 18:30:13,117:INFO:Importing libraries
2025-01-03 18:30:13,117:INFO:Copying training dataset
2025-01-03 18:30:13,296:INFO:Defining folds
2025-01-03 18:30:13,296:INFO:Declaring metric variables
2025-01-03 18:30:13,302:INFO:Importing untrained model
2025-01-03 18:30:13,303:INFO:SVM - Linear Kernel Imported successfully
2025-01-03 18:30:13,312:INFO:Starting cross validation
2025-01-03 18:30:13,314:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:34:26,402:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:34:26,543:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:26,880:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:27,085:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:34:27,241:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:27,639:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:34:28,288:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:34:28,438:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:28,792:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:29,000:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:34:29,143:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:39,690:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:34:40,311:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:34:40,436:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:40,738:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:40,909:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:34:41,037:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:51,613:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:34:52,062:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:34:52,180:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:52,480:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:52,659:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:34:52,791:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:52,961:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:34:53,429:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:34:53,564:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:53,832:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:53,988:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:34:54,097:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:57,404:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:34:57,874:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:34:57,996:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:58,260:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:58,426:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:34:58,539:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:34:59,502:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:34:59,610:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:34:59,954:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:00,037:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:00,078:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:00,176:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:00,386:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:00,484:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:00,595:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:00,675:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:00,731:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:00,814:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:02,845:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:35:03,218:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:03,327:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:03,565:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:03,744:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:03,878:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:03,983:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 18:35:04,287:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:04,381:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:04,578:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:04,704:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:04,800:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:05,188:INFO:Calculating mean and std
2025-01-03 18:35:05,188:INFO:Creating metrics dataframe
2025-01-03 18:35:05,188:INFO:Uploading results into container
2025-01-03 18:35:05,188:INFO:Uploading model into container now
2025-01-03 18:35:05,188:INFO:_master_model_container: 5
2025-01-03 18:35:05,188:INFO:_display_container: 2
2025-01-03 18:35:05,188:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-03 18:35:05,188:INFO:create_model() successfully completed......................................
2025-01-03 18:35:05,373:INFO:SubProcess create_model() end ==================================
2025-01-03 18:35:05,373:INFO:Creating metrics dataframe
2025-01-03 18:35:05,379:INFO:Initializing Ridge Classifier
2025-01-03 18:35:05,379:INFO:Total runtime is 8.394851167996725 minutes
2025-01-03 18:35:05,382:INFO:SubProcess create_model() called ==================================
2025-01-03 18:35:05,382:INFO:Initializing create_model()
2025-01-03 18:35:05,382:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:35:05,382:INFO:Checking exceptions
2025-01-03 18:35:05,382:INFO:Importing libraries
2025-01-03 18:35:05,382:INFO:Copying training dataset
2025-01-03 18:35:05,581:INFO:Defining folds
2025-01-03 18:35:05,581:INFO:Declaring metric variables
2025-01-03 18:35:05,584:INFO:Importing untrained model
2025-01-03 18:35:05,586:INFO:Ridge Classifier Imported successfully
2025-01-03 18:35:05,593:INFO:Starting cross validation
2025-01-03 18:35:05,598:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:35:18,270:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:18,388:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:18,671:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:18,839:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:18,863:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:18,954:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:18,994:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:19,251:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:19,427:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:19,475:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:19,545:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:19,609:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:19,911:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:20,082:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:20,208:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:20,462:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:20,580:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:20,870:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:21,051:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:21,051:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:21,160:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:21,178:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:21,448:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:21,625:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:21,723:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:21,774:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:21,832:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:22,100:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:22,274:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:22,305:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:22,375:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:22,433:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:22,693:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:22,850:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:22,902:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:22,946:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:23,000:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:23,277:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:23,302:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:23,406:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:23,463:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:23,559:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:23,699:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:23,751:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:35:23,821:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:23,898:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:23,902:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:24,155:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:24,297:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:35:24,386:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:35:24,777:INFO:Calculating mean and std
2025-01-03 18:35:24,779:INFO:Creating metrics dataframe
2025-01-03 18:35:24,779:INFO:Uploading results into container
2025-01-03 18:35:24,782:INFO:Uploading model into container now
2025-01-03 18:35:24,782:INFO:_master_model_container: 6
2025-01-03 18:35:24,782:INFO:_display_container: 2
2025-01-03 18:35:24,784:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-03 18:35:24,784:INFO:create_model() successfully completed......................................
2025-01-03 18:35:24,943:INFO:SubProcess create_model() end ==================================
2025-01-03 18:35:24,943:INFO:Creating metrics dataframe
2025-01-03 18:35:24,961:INFO:Initializing Random Forest Classifier
2025-01-03 18:35:24,961:INFO:Total runtime is 8.721228090922038 minutes
2025-01-03 18:35:24,968:INFO:SubProcess create_model() called ==================================
2025-01-03 18:35:24,968:INFO:Initializing create_model()
2025-01-03 18:35:24,968:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:35:24,968:INFO:Checking exceptions
2025-01-03 18:35:24,968:INFO:Importing libraries
2025-01-03 18:35:24,968:INFO:Copying training dataset
2025-01-03 18:35:25,159:INFO:Defining folds
2025-01-03 18:35:25,159:INFO:Declaring metric variables
2025-01-03 18:35:25,163:INFO:Importing untrained model
2025-01-03 18:35:25,166:INFO:Random Forest Classifier Imported successfully
2025-01-03 18:35:25,173:INFO:Starting cross validation
2025-01-03 18:35:25,173:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:36:45,226:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:36:47,535:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:36:48,836:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:36:49,816:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:36:52,282:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:36:54,514:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:36:54,901:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:36:55,773:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:36:56,583:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:36:57,004:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:36:58,036:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:36:58,817:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:36:59,841:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:01,529:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:02,062:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:37:02,073:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:02,249:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:02,491:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:02,686:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:37:02,702:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:02,840:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:03,105:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:03,306:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:03,385:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:37:03,519:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:03,552:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:03,559:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:03,601:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:03,601:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:03,771:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:37:03,838:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:03,878:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:03,888:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:03,893:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:03,988:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:37:04,037:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:37:04,068:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:37:04,143:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:04,147:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:04,193:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:04,657:INFO:Calculating mean and std
2025-01-03 18:37:04,657:INFO:Creating metrics dataframe
2025-01-03 18:37:04,658:INFO:Uploading results into container
2025-01-03 18:37:04,658:INFO:Uploading model into container now
2025-01-03 18:37:04,658:INFO:_master_model_container: 7
2025-01-03 18:37:04,658:INFO:_display_container: 2
2025-01-03 18:37:04,658:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-03 18:37:04,663:INFO:create_model() successfully completed......................................
2025-01-03 18:37:04,846:INFO:SubProcess create_model() end ==================================
2025-01-03 18:37:04,846:INFO:Creating metrics dataframe
2025-01-03 18:37:04,852:INFO:Initializing Quadratic Discriminant Analysis
2025-01-03 18:37:04,852:INFO:Total runtime is 10.386072067419688 minutes
2025-01-03 18:37:04,858:INFO:SubProcess create_model() called ==================================
2025-01-03 18:37:04,858:INFO:Initializing create_model()
2025-01-03 18:37:04,861:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:37:04,861:INFO:Checking exceptions
2025-01-03 18:37:04,861:INFO:Importing libraries
2025-01-03 18:37:04,861:INFO:Copying training dataset
2025-01-03 18:37:05,071:INFO:Defining folds
2025-01-03 18:37:05,079:INFO:Declaring metric variables
2025-01-03 18:37:05,083:INFO:Importing untrained model
2025-01-03 18:37:05,084:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-03 18:37:05,093:INFO:Starting cross validation
2025-01-03 18:37:05,095:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:37:18,411:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:37:18,546:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:18,602:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:37:18,733:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:18,853:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:19,030:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:19,130:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:19,338:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:19,396:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:37:19,538:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:19,826:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:20,130:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:20,222:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:37:20,340:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:20,636:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:20,783:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:37:20,900:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:20,951:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:21,187:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:21,397:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:37:21,497:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:21,519:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:21,820:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:21,999:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:37:22,089:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:22,112:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:22,421:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:22,660:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:37:22,705:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:22,783:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:23,058:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:23,140:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:37:23,240:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:23,322:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:23,519:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:37:23,577:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:23,602:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:23,822:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:23,895:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:24,121:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:37:24,571:INFO:Calculating mean and std
2025-01-03 18:37:24,574:INFO:Creating metrics dataframe
2025-01-03 18:37:24,576:INFO:Uploading results into container
2025-01-03 18:37:24,576:INFO:Uploading model into container now
2025-01-03 18:37:24,577:INFO:_master_model_container: 8
2025-01-03 18:37:24,577:INFO:_display_container: 2
2025-01-03 18:37:24,577:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-03 18:37:24,578:INFO:create_model() successfully completed......................................
2025-01-03 18:37:24,738:INFO:SubProcess create_model() end ==================================
2025-01-03 18:37:24,738:INFO:Creating metrics dataframe
2025-01-03 18:37:24,756:INFO:Initializing Ada Boost Classifier
2025-01-03 18:37:24,756:INFO:Total runtime is 10.717808624108633 minutes
2025-01-03 18:37:24,760:INFO:SubProcess create_model() called ==================================
2025-01-03 18:37:24,760:INFO:Initializing create_model()
2025-01-03 18:37:24,760:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:37:24,760:INFO:Checking exceptions
2025-01-03 18:37:24,760:INFO:Importing libraries
2025-01-03 18:37:24,760:INFO:Copying training dataset
2025-01-03 18:37:24,947:INFO:Defining folds
2025-01-03 18:37:24,947:INFO:Declaring metric variables
2025-01-03 18:37:24,953:INFO:Importing untrained model
2025-01-03 18:37:24,955:INFO:Ada Boost Classifier Imported successfully
2025-01-03 18:37:24,963:INFO:Starting cross validation
2025-01-03 18:37:24,969:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:37:37,025:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:37:37,799:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:37:38,222:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:37:38,722:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:37:39,508:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:37:40,233:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:37:40,826:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:37:41,748:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:37:42,578:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:37:43,183:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 18:38:12,614:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:38:12,761:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:12,970:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:38:13,065:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:13,107:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:13,389:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:13,430:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:13,567:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:38:13,611:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:38:13,689:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:13,725:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:13,983:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:14,061:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:38:14,191:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:14,295:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:14,536:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:14,828:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:38:14,865:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:14,940:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:15,220:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:15,346:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:38:15,460:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:15,512:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:15,734:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:15,747:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:38:15,869:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:16,038:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:16,136:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:16,396:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:16,441:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:38:16,577:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:16,822:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:16,996:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:38:17,063:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:17,105:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:17,327:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:17,356:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:38:17,451:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:17,555:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:17,674:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:17,966:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:38:18,354:INFO:Calculating mean and std
2025-01-03 18:38:18,356:INFO:Creating metrics dataframe
2025-01-03 18:38:18,356:INFO:Uploading results into container
2025-01-03 18:38:18,356:INFO:Uploading model into container now
2025-01-03 18:38:18,356:INFO:_master_model_container: 9
2025-01-03 18:38:18,356:INFO:_display_container: 2
2025-01-03 18:38:18,356:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-03 18:38:18,356:INFO:create_model() successfully completed......................................
2025-01-03 18:38:18,523:INFO:SubProcess create_model() end ==================================
2025-01-03 18:38:18,523:INFO:Creating metrics dataframe
2025-01-03 18:38:18,537:INFO:Initializing Gradient Boosting Classifier
2025-01-03 18:38:18,537:INFO:Total runtime is 11.614159619808198 minutes
2025-01-03 18:38:18,537:INFO:SubProcess create_model() called ==================================
2025-01-03 18:38:18,537:INFO:Initializing create_model()
2025-01-03 18:38:18,537:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:38:18,537:INFO:Checking exceptions
2025-01-03 18:38:18,537:INFO:Importing libraries
2025-01-03 18:38:18,537:INFO:Copying training dataset
2025-01-03 18:38:18,760:INFO:Defining folds
2025-01-03 18:38:18,760:INFO:Declaring metric variables
2025-01-03 18:38:18,771:INFO:Importing untrained model
2025-01-03 18:38:18,774:INFO:Gradient Boosting Classifier Imported successfully
2025-01-03 18:38:18,774:INFO:Starting cross validation
2025-01-03 18:38:18,787:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:48:47,921:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:48:48,040:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:48,333:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:48,521:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:48:48,615:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:48,632:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:48,914:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:49,202:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:49,265:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:48:49,378:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:49,620:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:49,869:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:50,846:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:48:50,943:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:51,072:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:48:51,166:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:51,166:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:51,315:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:48:51,374:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:51,406:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:51,406:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:51,611:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:51,673:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:51,908:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:52,029:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:48:52,139:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:48:52,144:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:52,159:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:48:52,228:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:52,244:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:52,359:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:52,451:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:52,451:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:52,501:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:48:52,564:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:48:52,579:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:48:52,589:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:52,662:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:52,674:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:52,674:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:52,867:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:52,995:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:48:53,085:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:48:53,471:INFO:Calculating mean and std
2025-01-03 18:48:53,471:INFO:Creating metrics dataframe
2025-01-03 18:48:53,471:INFO:Uploading results into container
2025-01-03 18:48:53,471:INFO:Uploading model into container now
2025-01-03 18:48:53,471:INFO:_master_model_container: 10
2025-01-03 18:48:53,471:INFO:_display_container: 2
2025-01-03 18:48:53,471:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-03 18:48:53,471:INFO:create_model() successfully completed......................................
2025-01-03 18:48:53,647:INFO:SubProcess create_model() end ==================================
2025-01-03 18:48:53,647:INFO:Creating metrics dataframe
2025-01-03 18:48:53,654:INFO:Initializing Linear Discriminant Analysis
2025-01-03 18:48:53,654:INFO:Total runtime is 22.199433743953705 minutes
2025-01-03 18:48:53,663:INFO:SubProcess create_model() called ==================================
2025-01-03 18:48:53,663:INFO:Initializing create_model()
2025-01-03 18:48:53,663:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:48:53,663:INFO:Checking exceptions
2025-01-03 18:48:53,663:INFO:Importing libraries
2025-01-03 18:48:53,663:INFO:Copying training dataset
2025-01-03 18:48:53,854:INFO:Defining folds
2025-01-03 18:48:53,854:INFO:Declaring metric variables
2025-01-03 18:48:53,856:INFO:Importing untrained model
2025-01-03 18:48:53,859:INFO:Linear Discriminant Analysis Imported successfully
2025-01-03 18:48:53,865:INFO:Starting cross validation
2025-01-03 18:48:53,868:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:49:06,491:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:49:06,596:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:06,934:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:07,096:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:49:07,127:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:49:07,216:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:07,234:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:07,507:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:07,657:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:49:07,780:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:07,860:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:49:07,962:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:08,224:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:08,343:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:49:08,376:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:49:08,463:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:08,479:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:08,727:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:08,864:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:49:08,968:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:09,185:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:49:09,286:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:09,527:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:09,667:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:49:09,774:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:09,779:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:49:09,895:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:10,128:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:10,264:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:49:10,359:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:49:10,364:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:10,451:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:10,681:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:10,808:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:49:10,898:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:10,987:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:49:11,081:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:11,297:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:11,361:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:49:11,427:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:49:11,447:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:11,518:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:11,664:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 18:49:11,669:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:11,752:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:11,793:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:49:11,884:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:11,966:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:12,086:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:49:12,182:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:49:12,569:INFO:Calculating mean and std
2025-01-03 18:49:12,571:INFO:Creating metrics dataframe
2025-01-03 18:49:12,573:INFO:Uploading results into container
2025-01-03 18:49:12,573:INFO:Uploading model into container now
2025-01-03 18:49:12,573:INFO:_master_model_container: 11
2025-01-03 18:49:12,573:INFO:_display_container: 2
2025-01-03 18:49:12,573:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-03 18:49:12,573:INFO:create_model() successfully completed......................................
2025-01-03 18:49:12,753:INFO:SubProcess create_model() end ==================================
2025-01-03 18:49:12,753:INFO:Creating metrics dataframe
2025-01-03 18:49:12,753:INFO:Initializing Extra Trees Classifier
2025-01-03 18:49:12,753:INFO:Total runtime is 22.517762116591136 minutes
2025-01-03 18:49:12,766:INFO:SubProcess create_model() called ==================================
2025-01-03 18:49:12,766:INFO:Initializing create_model()
2025-01-03 18:49:12,766:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:49:12,766:INFO:Checking exceptions
2025-01-03 18:49:12,766:INFO:Importing libraries
2025-01-03 18:49:12,766:INFO:Copying training dataset
2025-01-03 18:49:12,958:INFO:Defining folds
2025-01-03 18:49:12,958:INFO:Declaring metric variables
2025-01-03 18:49:12,960:INFO:Importing untrained model
2025-01-03 18:49:12,965:INFO:Extra Trees Classifier Imported successfully
2025-01-03 18:49:12,965:INFO:Starting cross validation
2025-01-03 18:49:12,972:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:50:27,046:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:28,622:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:29,279:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:50:29,701:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:30,480:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:30,719:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:30,887:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,099:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,129:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,174:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,247:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,286:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,290:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:50:31,319:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,383:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,423:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,466:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,466:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:50:31,510:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:50:31,552:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,689:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,705:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,720:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,752:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:50:31,828:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:50:31,872:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,884:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,909:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:31,917:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:50:31,934:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:32,009:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:32,033:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:50:32,038:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:32,158:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:32,200:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:32,271:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:32,350:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:50:32,408:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:50:32,448:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:32,505:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:50:33,120:INFO:Calculating mean and std
2025-01-03 18:50:33,121:INFO:Creating metrics dataframe
2025-01-03 18:50:33,124:INFO:Uploading results into container
2025-01-03 18:50:33,124:INFO:Uploading model into container now
2025-01-03 18:50:33,125:INFO:_master_model_container: 12
2025-01-03 18:50:33,125:INFO:_display_container: 2
2025-01-03 18:50:33,125:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-03 18:50:33,125:INFO:create_model() successfully completed......................................
2025-01-03 18:50:33,299:INFO:SubProcess create_model() end ==================================
2025-01-03 18:50:33,299:INFO:Creating metrics dataframe
2025-01-03 18:50:33,308:INFO:Initializing Light Gradient Boosting Machine
2025-01-03 18:50:33,308:INFO:Total runtime is 23.86033216714859 minutes
2025-01-03 18:50:33,311:INFO:SubProcess create_model() called ==================================
2025-01-03 18:50:33,311:INFO:Initializing create_model()
2025-01-03 18:50:33,311:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:50:33,311:INFO:Checking exceptions
2025-01-03 18:50:33,311:INFO:Importing libraries
2025-01-03 18:50:33,311:INFO:Copying training dataset
2025-01-03 18:50:33,493:INFO:Defining folds
2025-01-03 18:50:33,493:INFO:Declaring metric variables
2025-01-03 18:50:33,493:INFO:Importing untrained model
2025-01-03 18:50:33,493:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-03 18:50:33,506:INFO:Starting cross validation
2025-01-03 18:50:33,506:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:51:11,382:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:11,771:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:12,158:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:14,628:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:14,707:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:15,110:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:15,142:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:15,320:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:15,505:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:15,537:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:15,701:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:16,154:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:17,474:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:17,961:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:18,216:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:51:18,220:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:18,371:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:18,598:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:19,249:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:19,596:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:20,059:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:20,182:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:20,483:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:20,611:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:20,900:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:21,024:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:21,159:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:21,223:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:21,487:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:21,564:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:21,763:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:22,194:INFO:Calculating mean and std
2025-01-03 18:51:22,195:INFO:Creating metrics dataframe
2025-01-03 18:51:22,197:INFO:Uploading results into container
2025-01-03 18:51:22,198:INFO:Uploading model into container now
2025-01-03 18:51:22,198:INFO:_master_model_container: 13
2025-01-03 18:51:22,198:INFO:_display_container: 2
2025-01-03 18:51:22,199:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-03 18:51:22,199:INFO:create_model() successfully completed......................................
2025-01-03 18:51:22,376:INFO:SubProcess create_model() end ==================================
2025-01-03 18:51:22,376:INFO:Creating metrics dataframe
2025-01-03 18:51:22,384:INFO:Initializing Dummy Classifier
2025-01-03 18:51:22,385:INFO:Total runtime is 24.678280413150787 minutes
2025-01-03 18:51:22,389:INFO:SubProcess create_model() called ==================================
2025-01-03 18:51:22,389:INFO:Initializing create_model()
2025-01-03 18:51:22,389:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023F8B3DA1D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:51:22,389:INFO:Checking exceptions
2025-01-03 18:51:22,389:INFO:Importing libraries
2025-01-03 18:51:22,389:INFO:Copying training dataset
2025-01-03 18:51:22,599:INFO:Defining folds
2025-01-03 18:51:22,599:INFO:Declaring metric variables
2025-01-03 18:51:22,602:INFO:Importing untrained model
2025-01-03 18:51:22,606:INFO:Dummy Classifier Imported successfully
2025-01-03 18:51:22,610:INFO:Starting cross validation
2025-01-03 18:51:22,610:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 18:51:35,942:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:36,238:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:36,238:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:36,423:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:51:36,546:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:36,556:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:36,718:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:51:36,836:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:37,060:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:37,331:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:37,521:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:51:37,649:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:37,718:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:38,009:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:38,189:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:51:38,318:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:38,415:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:38,707:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:38,898:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:51:39,022:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:39,041:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:39,366:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:39,546:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:51:39,668:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:39,843:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:40,102:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:40,149:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:40,339:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:51:40,384:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:40,452:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:40,579:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:51:40,674:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:40,731:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:41,008:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:41,144:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:51:41,170:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:41,268:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:41,493:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:41,686:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 18:51:41,810:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 18:51:42,422:INFO:Calculating mean and std
2025-01-03 18:51:42,422:INFO:Creating metrics dataframe
2025-01-03 18:51:42,426:INFO:Uploading results into container
2025-01-03 18:51:42,426:INFO:Uploading model into container now
2025-01-03 18:51:42,426:INFO:_master_model_container: 14
2025-01-03 18:51:42,426:INFO:_display_container: 2
2025-01-03 18:51:42,426:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-03 18:51:42,426:INFO:create_model() successfully completed......................................
2025-01-03 18:51:42,602:INFO:SubProcess create_model() end ==================================
2025-01-03 18:51:42,602:INFO:Creating metrics dataframe
2025-01-03 18:51:42,603:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-03 18:51:42,620:INFO:Initializing create_model()
2025-01-03 18:51:42,621:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3C7310>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:51:42,621:INFO:Checking exceptions
2025-01-03 18:51:42,623:INFO:Importing libraries
2025-01-03 18:51:42,623:INFO:Copying training dataset
2025-01-03 18:51:42,814:INFO:Defining folds
2025-01-03 18:51:42,814:INFO:Declaring metric variables
2025-01-03 18:51:42,814:INFO:Importing untrained model
2025-01-03 18:51:42,814:INFO:Declaring custom model
2025-01-03 18:51:42,814:INFO:K Neighbors Classifier Imported successfully
2025-01-03 18:51:42,824:INFO:Cross validation set to False
2025-01-03 18:51:42,824:INFO:Fitting Model
2025-01-03 18:51:49,908:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-03 18:51:49,908:INFO:create_model() successfully completed......................................
2025-01-03 18:51:50,119:INFO:_master_model_container: 14
2025-01-03 18:51:50,119:INFO:_display_container: 2
2025-01-03 18:51:50,119:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-03 18:51:50,119:INFO:compare_models() successfully completed......................................
2025-01-03 18:53:27,045:WARNING:C:\Users\jacj2\AppData\Local\Temp\ipykernel_15844\2316916227.py:1: DtypeWarning: Columns (8) have mixed types. Specify dtype option on import or set low_memory=False.
  test=pd.read_csv(r"../data/test_set.csv")

2025-01-03 18:53:28,598:INFO:Initializing load_model()
2025-01-03 18:53:28,599:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\Scripts\model, platform=None, authentication=None, verbose=True)
2025-01-03 18:53:59,743:INFO:Initializing load_model()
2025-01-03 18:53:59,744:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model, platform=None, authentication=None, verbose=True)
2025-01-03 18:54:09,728:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 18:54:11,908:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.80s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 18:54:13,972:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 18:54:18,634:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 1.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 18:54:20,708:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:328: UserWarning: Persisting input arguments took 1.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2025-01-03 18:55:08,982:WARNING:C:\Users\jacj2\AppData\Local\Temp\ipykernel_15844\3561867503.py:2: DtypeWarning: Columns (8) have mixed types. Specify dtype option on import or set low_memory=False.
  data=pd.read_csv(r'..\data\train_set.csv')

2025-01-03 18:56:08,046:WARNING:C:\Users\jacj2\AppData\Local\Temp\ipykernel_15844\3561867503.py:2: DtypeWarning: Columns (8) have mixed types. Specify dtype option on import or set low_memory=False.
  data=pd.read_csv(r'..\data\train_set.csv')

2025-01-03 18:56:08,491:INFO:PyCaret ClassificationExperiment
2025-01-03 18:56:08,491:INFO:Logging name: clf-default-name
2025-01-03 18:56:08,491:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-03 18:56:08,491:INFO:version 3.3.2
2025-01-03 18:56:08,491:INFO:Initializing setup()
2025-01-03 18:56:08,491:INFO:self.USI: 057e
2025-01-03 18:56:08,491:INFO:self._variable_keys: {'log_plots_param', 'y_test', 'X_train', '_ml_usecase', 'exp_name_log', 'fold_shuffle_param', 'is_multiclass', 'fold_groups_param', 'y', 'fold_generator', 'USI', 'logging_param', 'data', 'X', 'seed', 'target_param', 'memory', 'n_jobs_param', 'pipeline', 'y_train', '_available_plots', 'gpu_n_jobs_param', 'fix_imbalance', 'html_param', 'gpu_param', 'idx', 'exp_id', 'X_test'}
2025-01-03 18:56:08,491:INFO:Checking environment
2025-01-03 18:56:08,492:INFO:python_version: 3.10.15
2025-01-03 18:56:08,492:INFO:python_build: ('main', 'Oct  3 2024 07:22:19')
2025-01-03 18:56:08,492:INFO:machine: AMD64
2025-01-03 18:56:08,492:INFO:platform: Windows-10-10.0.26100-SP0
2025-01-03 18:56:08,497:INFO:Memory: svmem(total=25439199232, available=11818708992, percent=53.5, used=13620490240, free=11818708992)
2025-01-03 18:56:08,497:INFO:Physical Core: 8
2025-01-03 18:56:08,497:INFO:Logical Core: 16
2025-01-03 18:56:08,497:INFO:Checking libraries
2025-01-03 18:56:08,497:INFO:System:
2025-01-03 18:56:08,497:INFO:    python: 3.10.15 | packaged by Anaconda, Inc. | (main, Oct  3 2024, 07:22:19) [MSC v.1929 64 bit (AMD64)]
2025-01-03 18:56:08,497:INFO:executable: c:\Users\jacj2\anaconda3\envs\tensor_gpu1\python.exe
2025-01-03 18:56:08,497:INFO:   machine: Windows-10-10.0.26100-SP0
2025-01-03 18:56:08,497:INFO:PyCaret required dependencies:
2025-01-03 18:56:08,497:INFO:                 pip: 24.2
2025-01-03 18:56:08,497:INFO:          setuptools: 75.1.0
2025-01-03 18:56:08,497:INFO:             pycaret: 3.3.2
2025-01-03 18:56:08,497:INFO:             IPython: 8.30.0
2025-01-03 18:56:08,497:INFO:          ipywidgets: 8.1.5
2025-01-03 18:56:08,497:INFO:                tqdm: 4.67.1
2025-01-03 18:56:08,497:INFO:               numpy: 1.26.4
2025-01-03 18:56:08,497:INFO:              pandas: 2.1.4
2025-01-03 18:56:08,497:INFO:              jinja2: 3.1.5
2025-01-03 18:56:08,497:INFO:               scipy: 1.11.4
2025-01-03 18:56:08,497:INFO:              joblib: 1.3.2
2025-01-03 18:56:08,497:INFO:             sklearn: 1.4.2
2025-01-03 18:56:08,497:INFO:                pyod: 2.0.3
2025-01-03 18:56:08,497:INFO:            imblearn: 0.13.0
2025-01-03 18:56:08,497:INFO:   category_encoders: 2.6.4
2025-01-03 18:56:08,497:INFO:            lightgbm: 4.5.0
2025-01-03 18:56:08,497:INFO:               numba: 0.60.0
2025-01-03 18:56:08,497:INFO:            requests: 2.32.3
2025-01-03 18:56:08,497:INFO:          matplotlib: 3.7.5
2025-01-03 18:56:08,497:INFO:          scikitplot: 0.3.7
2025-01-03 18:56:08,497:INFO:         yellowbrick: 1.5
2025-01-03 18:56:08,497:INFO:              plotly: 5.24.1
2025-01-03 18:56:08,497:INFO:    plotly-resampler: Not installed
2025-01-03 18:56:08,497:INFO:             kaleido: 0.2.1
2025-01-03 18:56:08,497:INFO:           schemdraw: 0.15
2025-01-03 18:56:08,497:INFO:         statsmodels: 0.14.4
2025-01-03 18:56:08,497:INFO:              sktime: 0.26.0
2025-01-03 18:56:08,497:INFO:               tbats: 1.1.3
2025-01-03 18:56:08,497:INFO:            pmdarima: 2.0.4
2025-01-03 18:56:08,497:INFO:              psutil: 6.1.0
2025-01-03 18:56:08,497:INFO:          markupsafe: 3.0.2
2025-01-03 18:56:08,497:INFO:             pickle5: Not installed
2025-01-03 18:56:08,497:INFO:         cloudpickle: 3.1.0
2025-01-03 18:56:08,497:INFO:         deprecation: 2.1.0
2025-01-03 18:56:08,497:INFO:              xxhash: 3.5.0
2025-01-03 18:56:08,497:INFO:           wurlitzer: Not installed
2025-01-03 18:56:08,498:INFO:PyCaret optional dependencies:
2025-01-03 18:56:08,498:INFO:                shap: 0.46.0
2025-01-03 18:56:08,498:INFO:           interpret: Not installed
2025-01-03 18:56:08,498:INFO:                umap: Not installed
2025-01-03 18:56:08,498:INFO:     ydata_profiling: Not installed
2025-01-03 18:56:08,498:INFO:  explainerdashboard: Not installed
2025-01-03 18:56:08,498:INFO:             autoviz: Not installed
2025-01-03 18:56:08,498:INFO:           fairlearn: Not installed
2025-01-03 18:56:08,498:INFO:          deepchecks: Not installed
2025-01-03 18:56:08,498:INFO:             xgboost: Not installed
2025-01-03 18:56:08,498:INFO:            catboost: Not installed
2025-01-03 18:56:08,498:INFO:              kmodes: Not installed
2025-01-03 18:56:08,498:INFO:             mlxtend: Not installed
2025-01-03 18:56:08,498:INFO:       statsforecast: Not installed
2025-01-03 18:56:08,498:INFO:        tune_sklearn: Not installed
2025-01-03 18:56:08,499:INFO:                 ray: Not installed
2025-01-03 18:56:08,499:INFO:            hyperopt: Not installed
2025-01-03 18:56:08,499:INFO:              optuna: Not installed
2025-01-03 18:56:08,499:INFO:               skopt: Not installed
2025-01-03 18:56:08,499:INFO:              mlflow: Not installed
2025-01-03 18:56:08,499:INFO:              gradio: Not installed
2025-01-03 18:56:08,499:INFO:             fastapi: Not installed
2025-01-03 18:56:08,499:INFO:             uvicorn: Not installed
2025-01-03 18:56:08,499:INFO:              m2cgen: Not installed
2025-01-03 18:56:08,499:INFO:           evidently: Not installed
2025-01-03 18:56:08,499:INFO:               fugue: Not installed
2025-01-03 18:56:08,499:INFO:           streamlit: Not installed
2025-01-03 18:56:08,499:INFO:             prophet: Not installed
2025-01-03 18:56:08,499:INFO:None
2025-01-03 18:56:08,499:INFO:Set up data.
2025-01-03 18:56:38,689:WARNING:C:\Users\jacj2\AppData\Local\Temp\ipykernel_15844\3561867503.py:2: DtypeWarning: Columns (8) have mixed types. Specify dtype option on import or set low_memory=False.
  data=pd.read_csv(r'..\data\train_set.csv')

2025-01-03 18:56:39,130:INFO:PyCaret ClassificationExperiment
2025-01-03 18:56:39,130:INFO:Logging name: clf-default-name
2025-01-03 18:56:39,130:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-03 18:56:39,130:INFO:version 3.3.2
2025-01-03 18:56:39,130:INFO:Initializing setup()
2025-01-03 18:56:39,130:INFO:self.USI: db1d
2025-01-03 18:56:39,130:INFO:self._variable_keys: {'log_plots_param', 'y_test', 'X_train', '_ml_usecase', 'exp_name_log', 'fold_shuffle_param', 'is_multiclass', 'fold_groups_param', 'y', 'fold_generator', 'USI', 'logging_param', 'data', 'X', 'seed', 'target_param', 'memory', 'n_jobs_param', 'pipeline', 'y_train', '_available_plots', 'gpu_n_jobs_param', 'fix_imbalance', 'html_param', 'gpu_param', 'idx', 'exp_id', 'X_test'}
2025-01-03 18:56:39,130:INFO:Checking environment
2025-01-03 18:56:39,130:INFO:python_version: 3.10.15
2025-01-03 18:56:39,130:INFO:python_build: ('main', 'Oct  3 2024 07:22:19')
2025-01-03 18:56:39,130:INFO:machine: AMD64
2025-01-03 18:56:39,130:INFO:platform: Windows-10-10.0.26100-SP0
2025-01-03 18:56:39,137:INFO:Memory: svmem(total=25439199232, available=12993257472, percent=48.9, used=12445941760, free=12993257472)
2025-01-03 18:56:39,137:INFO:Physical Core: 8
2025-01-03 18:56:39,137:INFO:Logical Core: 16
2025-01-03 18:56:39,137:INFO:Checking libraries
2025-01-03 18:56:39,137:INFO:System:
2025-01-03 18:56:39,137:INFO:    python: 3.10.15 | packaged by Anaconda, Inc. | (main, Oct  3 2024, 07:22:19) [MSC v.1929 64 bit (AMD64)]
2025-01-03 18:56:39,137:INFO:executable: c:\Users\jacj2\anaconda3\envs\tensor_gpu1\python.exe
2025-01-03 18:56:39,137:INFO:   machine: Windows-10-10.0.26100-SP0
2025-01-03 18:56:39,137:INFO:PyCaret required dependencies:
2025-01-03 18:56:39,137:INFO:                 pip: 24.2
2025-01-03 18:56:39,137:INFO:          setuptools: 75.1.0
2025-01-03 18:56:39,137:INFO:             pycaret: 3.3.2
2025-01-03 18:56:39,137:INFO:             IPython: 8.30.0
2025-01-03 18:56:39,137:INFO:          ipywidgets: 8.1.5
2025-01-03 18:56:39,137:INFO:                tqdm: 4.67.1
2025-01-03 18:56:39,137:INFO:               numpy: 1.26.4
2025-01-03 18:56:39,137:INFO:              pandas: 2.1.4
2025-01-03 18:56:39,137:INFO:              jinja2: 3.1.5
2025-01-03 18:56:39,137:INFO:               scipy: 1.11.4
2025-01-03 18:56:39,137:INFO:              joblib: 1.3.2
2025-01-03 18:56:39,137:INFO:             sklearn: 1.4.2
2025-01-03 18:56:39,137:INFO:                pyod: 2.0.3
2025-01-03 18:56:39,137:INFO:            imblearn: 0.13.0
2025-01-03 18:56:39,137:INFO:   category_encoders: 2.6.4
2025-01-03 18:56:39,137:INFO:            lightgbm: 4.5.0
2025-01-03 18:56:39,137:INFO:               numba: 0.60.0
2025-01-03 18:56:39,137:INFO:            requests: 2.32.3
2025-01-03 18:56:39,137:INFO:          matplotlib: 3.7.5
2025-01-03 18:56:39,137:INFO:          scikitplot: 0.3.7
2025-01-03 18:56:39,137:INFO:         yellowbrick: 1.5
2025-01-03 18:56:39,137:INFO:              plotly: 5.24.1
2025-01-03 18:56:39,137:INFO:    plotly-resampler: Not installed
2025-01-03 18:56:39,137:INFO:             kaleido: 0.2.1
2025-01-03 18:56:39,137:INFO:           schemdraw: 0.15
2025-01-03 18:56:39,137:INFO:         statsmodels: 0.14.4
2025-01-03 18:56:39,137:INFO:              sktime: 0.26.0
2025-01-03 18:56:39,137:INFO:               tbats: 1.1.3
2025-01-03 18:56:39,137:INFO:            pmdarima: 2.0.4
2025-01-03 18:56:39,137:INFO:              psutil: 6.1.0
2025-01-03 18:56:39,137:INFO:          markupsafe: 3.0.2
2025-01-03 18:56:39,137:INFO:             pickle5: Not installed
2025-01-03 18:56:39,137:INFO:         cloudpickle: 3.1.0
2025-01-03 18:56:39,137:INFO:         deprecation: 2.1.0
2025-01-03 18:56:39,137:INFO:              xxhash: 3.5.0
2025-01-03 18:56:39,137:INFO:           wurlitzer: Not installed
2025-01-03 18:56:39,137:INFO:PyCaret optional dependencies:
2025-01-03 18:56:39,137:INFO:                shap: 0.46.0
2025-01-03 18:56:39,137:INFO:           interpret: Not installed
2025-01-03 18:56:39,137:INFO:                umap: Not installed
2025-01-03 18:56:39,137:INFO:     ydata_profiling: Not installed
2025-01-03 18:56:39,137:INFO:  explainerdashboard: Not installed
2025-01-03 18:56:39,137:INFO:             autoviz: Not installed
2025-01-03 18:56:39,137:INFO:           fairlearn: Not installed
2025-01-03 18:56:39,137:INFO:          deepchecks: Not installed
2025-01-03 18:56:39,137:INFO:             xgboost: Not installed
2025-01-03 18:56:39,137:INFO:            catboost: Not installed
2025-01-03 18:56:39,137:INFO:              kmodes: Not installed
2025-01-03 18:56:39,137:INFO:             mlxtend: Not installed
2025-01-03 18:56:39,137:INFO:       statsforecast: Not installed
2025-01-03 18:56:39,137:INFO:        tune_sklearn: Not installed
2025-01-03 18:56:39,137:INFO:                 ray: Not installed
2025-01-03 18:56:39,137:INFO:            hyperopt: Not installed
2025-01-03 18:56:39,137:INFO:              optuna: Not installed
2025-01-03 18:56:39,137:INFO:               skopt: Not installed
2025-01-03 18:56:39,137:INFO:              mlflow: Not installed
2025-01-03 18:56:39,137:INFO:              gradio: Not installed
2025-01-03 18:56:39,137:INFO:             fastapi: Not installed
2025-01-03 18:56:39,137:INFO:             uvicorn: Not installed
2025-01-03 18:56:39,137:INFO:              m2cgen: Not installed
2025-01-03 18:56:39,137:INFO:           evidently: Not installed
2025-01-03 18:56:39,137:INFO:               fugue: Not installed
2025-01-03 18:56:39,137:INFO:           streamlit: Not installed
2025-01-03 18:56:39,137:INFO:             prophet: Not installed
2025-01-03 18:56:39,137:INFO:None
2025-01-03 18:56:39,137:INFO:Set up data.
2025-01-03 18:56:41,698:INFO:Set up folding strategy.
2025-01-03 18:56:41,698:INFO:Set up train/test split.
2025-01-03 18:56:42,747:INFO:Set up index.
2025-01-03 18:56:42,761:INFO:Assigning column types.
2025-01-03 18:56:42,849:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-03 18:56:42,872:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-03 18:56:42,872:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 18:56:42,904:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:56:42,904:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:56:42,937:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-03 18:56:42,937:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 18:56:42,950:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:56:42,950:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:56:42,950:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-03 18:56:42,999:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 18:56:43,018:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:56:43,018:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:56:43,048:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-03 18:56:43,071:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:56:43,071:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:56:43,071:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-03 18:56:43,128:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:56:43,128:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:56:43,174:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:56:43,174:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:56:43,190:INFO:Preparing preprocessing pipeline...
2025-01-03 18:56:43,206:INFO:Set up label encoding.
2025-01-03 18:56:43,206:INFO:Set up simple imputation.
2025-01-03 18:56:43,285:INFO:Set up encoding of ordinal features.
2025-01-03 18:56:43,318:INFO:Set up encoding of categorical features.
2025-01-03 18:56:43,320:INFO:Set up removing multicollinearity.
2025-01-03 18:56:50,864:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:249: UserWarning: Persisting input arguments took 0.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2025-01-03 18:56:53,616:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:256: UserWarning: Persisting input arguments took 0.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2025-01-03 18:56:57,582:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:256: UserWarning: Persisting input arguments took 1.10s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2025-01-03 18:57:04,869:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:249: UserWarning: Persisting input arguments took 2.54s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2025-01-03 18:57:10,628:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:256: UserWarning: Persisting input arguments took 2.50s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2025-01-03 18:57:10,796:INFO:Finished creating preprocessing pipeline.
2025-01-03 18:57:10,814:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['start_station', 'end_lon',
                                             'end_station', 'duration',
                                             'start_lat', 'end_lat',
                                             'start_lon'],
                                    transformer=Si...
                                    transformer=TargetEncoder(cols=['start_time',
                                                                    'bike_id',
                                                                    'end_time'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95)))],
         verbose=False)
2025-01-03 18:57:10,814:INFO:Creating final display dataframe.
2025-01-03 18:57:18,626:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.73s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 18:57:23,367:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 2.44s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_full_transform(

2025-01-03 18:57:30,268:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 18:57:31,567:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.53s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 18:57:35,923:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 1.96s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 18:57:38,426:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 2.46s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_full_transform(

2025-01-03 18:57:43,603:INFO:Setup _display_container:                     Description  \
0                    Session id   
1                        Target   
2                   Target type   
3                Target mapping   
4           Original data shape   
5        Transformed data shape   
6   Transformed train set shape   
7    Transformed test set shape   
8              Numeric features   
9          Categorical features   
10                   Preprocess   
11              Imputation type   
12           Numeric imputation   
13       Categorical imputation   
14     Maximum one-hot encoding   
15              Encoding method   
16     Remove multicollinearity   
17  Multicollinearity threshold   
18               Fold Generator   
19                  Fold Number   
20                     CPU Jobs   
21                      Use GPU   
22               Log Experiment   
23              Experiment Name   
24                          USI   

                                                Value  
0                                                 123  
1                                     passholder_type  
2                                          Multiclass  
3   Annual Pass: 0, Flex Pass: 1, Monthly Pass: 2,...  
4                                        (675626, 12)  
5                                        (675626, 10)  
6                                        (472938, 10)  
7                                        (202688, 10)  
8                                                   7  
9                                                   4  
10                                               True  
11                                             simple  
12                                               mean  
13                                               mode  
14                                                 25  
15                                               None  
16                                               True  
17                                               0.95  
18                                    StratifiedKFold  
19                                                 10  
20                                                 -1  
21                                              False  
22                                              False  
23                                   clf-default-name  
24                                               db1d  
2025-01-03 18:57:43,672:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:57:43,672:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:57:43,730:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:57:43,730:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-03 18:57:43,730:INFO:setup() successfully completed in 64.61s...............
2025-01-03 18:57:43,771:INFO:Initializing compare_models()
2025-01-03 18:57:43,771:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-03 18:57:43,771:INFO:Checking exceptions
2025-01-03 18:57:43,852:INFO:Preparing display monitor
2025-01-03 18:57:43,877:INFO:Initializing Logistic Regression
2025-01-03 18:57:43,877:INFO:Total runtime is 0.0 minutes
2025-01-03 18:57:43,881:INFO:SubProcess create_model() called ==================================
2025-01-03 18:57:43,881:INFO:Initializing create_model()
2025-01-03 18:57:43,882:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 18:57:43,882:INFO:Checking exceptions
2025-01-03 18:57:43,882:INFO:Importing libraries
2025-01-03 18:57:43,882:INFO:Copying training dataset
2025-01-03 18:57:44,047:INFO:Defining folds
2025-01-03 18:57:44,047:INFO:Declaring metric variables
2025-01-03 18:57:44,060:INFO:Importing untrained model
2025-01-03 18:57:44,063:INFO:Logistic Regression Imported successfully
2025-01-03 18:57:44,069:INFO:Starting cross validation
2025-01-03 18:57:44,072:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:00:02,179:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 19:00:03,078:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 19:00:03,181:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:00:03,324:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:03,641:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:03,689:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 19:00:03,830:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:03,971:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:04,000:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:00:04,106:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:04,410:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:04,442:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 19:00:04,449:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:00:04,507:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 19:00:04,578:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:04,596:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:04,723:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:04,882:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:05,024:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:05,149:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:05,172:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 19:00:05,188:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:00:05,198:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:00:05,306:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:05,314:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:05,592:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:05,596:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:05,689:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:00:05,733:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:05,747:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:05,791:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:05,830:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:05,848:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:05,904:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 19:00:05,958:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 19:00:06,040:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:06,178:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:06,272:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:06,384:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:00:06,452:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:00:06,483:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:06,549:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:06,631:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 19:00:06,714:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:06,770:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:06,839:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:06,904:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:06,922:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:06,998:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:07,006:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:00:07,090:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:07,307:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:07,424:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:07,521:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:08,423:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-03 19:00:08,702:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:00:08,797:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:08,993:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:09,102:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:09,185:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:09,769:INFO:Calculating mean and std
2025-01-03 19:00:09,771:INFO:Creating metrics dataframe
2025-01-03 19:00:09,773:INFO:Uploading results into container
2025-01-03 19:00:09,773:INFO:Uploading model into container now
2025-01-03 19:00:09,774:INFO:_master_model_container: 1
2025-01-03 19:00:09,775:INFO:_display_container: 2
2025-01-03 19:00:09,775:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-03 19:00:09,775:INFO:create_model() successfully completed......................................
2025-01-03 19:00:10,048:INFO:SubProcess create_model() end ==================================
2025-01-03 19:00:10,048:INFO:Creating metrics dataframe
2025-01-03 19:00:10,048:INFO:Initializing K Neighbors Classifier
2025-01-03 19:00:10,048:INFO:Total runtime is 2.4361742734909058 minutes
2025-01-03 19:00:10,048:INFO:SubProcess create_model() called ==================================
2025-01-03 19:00:10,048:INFO:Initializing create_model()
2025-01-03 19:00:10,048:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:00:10,048:INFO:Checking exceptions
2025-01-03 19:00:10,048:INFO:Importing libraries
2025-01-03 19:00:10,048:INFO:Copying training dataset
2025-01-03 19:00:10,228:INFO:Defining folds
2025-01-03 19:00:10,228:INFO:Declaring metric variables
2025-01-03 19:00:10,228:INFO:Importing untrained model
2025-01-03 19:00:10,242:INFO:K Neighbors Classifier Imported successfully
2025-01-03 19:00:10,243:INFO:Starting cross validation
2025-01-03 19:00:10,250:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:00:31,265:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:31,472:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:31,623:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:31,828:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:31,939:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:31,980:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:32,086:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:32,126:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:32,210:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:32,258:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:32,352:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:32,376:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:32,592:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:32,651:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:32,741:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:32,786:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:32,905:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:32,927:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:33,076:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:33,138:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:33,192:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:33,272:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:33,275:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:33,393:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:33,514:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:33,711:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:33,720:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:33,823:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:33,844:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:33,884:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:33,958:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:33,966:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:33,977:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:34,052:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:34,052:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:34,176:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:34,176:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:34,260:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:34,302:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:00:34,384:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:34,883:INFO:Calculating mean and std
2025-01-03 19:00:34,885:INFO:Creating metrics dataframe
2025-01-03 19:00:34,888:INFO:Uploading results into container
2025-01-03 19:00:34,888:INFO:Uploading model into container now
2025-01-03 19:00:34,888:INFO:_master_model_container: 2
2025-01-03 19:00:34,888:INFO:_display_container: 2
2025-01-03 19:00:34,889:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-03 19:00:34,889:INFO:create_model() successfully completed......................................
2025-01-03 19:00:35,064:INFO:SubProcess create_model() end ==================================
2025-01-03 19:00:35,064:INFO:Creating metrics dataframe
2025-01-03 19:00:35,077:INFO:Initializing Naive Bayes
2025-01-03 19:00:35,077:INFO:Total runtime is 2.853324604034424 minutes
2025-01-03 19:00:35,080:INFO:SubProcess create_model() called ==================================
2025-01-03 19:00:35,081:INFO:Initializing create_model()
2025-01-03 19:00:35,081:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:00:35,081:INFO:Checking exceptions
2025-01-03 19:00:35,081:INFO:Importing libraries
2025-01-03 19:00:35,081:INFO:Copying training dataset
2025-01-03 19:00:35,248:INFO:Defining folds
2025-01-03 19:00:35,248:INFO:Declaring metric variables
2025-01-03 19:00:35,258:INFO:Importing untrained model
2025-01-03 19:00:35,259:INFO:Naive Bayes Imported successfully
2025-01-03 19:00:35,264:INFO:Starting cross validation
2025-01-03 19:00:35,271:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:00:47,639:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:47,857:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:47,908:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:48,107:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:48,175:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:48,391:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:48,693:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:48,943:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:49,210:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:49,502:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:49,754:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:49,846:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:50,016:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:50,086:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:50,351:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:50,628:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:50,851:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:51,074:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:51,207:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:51,439:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:51,658:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:51,745:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:51,959:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:52,128:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:52,183:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:52,351:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:52,486:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:52,568:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:52,707:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:52,918:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:00:53,306:INFO:Calculating mean and std
2025-01-03 19:00:53,306:INFO:Creating metrics dataframe
2025-01-03 19:00:53,309:INFO:Uploading results into container
2025-01-03 19:00:53,309:INFO:Uploading model into container now
2025-01-03 19:00:53,309:INFO:_master_model_container: 3
2025-01-03 19:00:53,309:INFO:_display_container: 2
2025-01-03 19:00:53,309:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-03 19:00:53,309:INFO:create_model() successfully completed......................................
2025-01-03 19:00:53,486:INFO:SubProcess create_model() end ==================================
2025-01-03 19:00:53,486:INFO:Creating metrics dataframe
2025-01-03 19:00:53,500:INFO:Initializing Decision Tree Classifier
2025-01-03 19:00:53,500:INFO:Total runtime is 3.1603758454322817 minutes
2025-01-03 19:00:53,507:INFO:SubProcess create_model() called ==================================
2025-01-03 19:00:53,507:INFO:Initializing create_model()
2025-01-03 19:00:53,507:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:00:53,507:INFO:Checking exceptions
2025-01-03 19:00:53,507:INFO:Importing libraries
2025-01-03 19:00:53,507:INFO:Copying training dataset
2025-01-03 19:00:53,681:INFO:Defining folds
2025-01-03 19:00:53,681:INFO:Declaring metric variables
2025-01-03 19:00:53,681:INFO:Importing untrained model
2025-01-03 19:00:53,688:INFO:Decision Tree Classifier Imported successfully
2025-01-03 19:00:53,688:INFO:Starting cross validation
2025-01-03 19:00:53,697:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:01:08,425:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:08,707:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:08,875:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:01:08,987:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:08,994:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:09,285:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:09,451:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:01:09,567:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:09,884:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:10,146:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:10,223:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:10,299:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:01:10,406:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:10,504:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:10,645:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:01:10,769:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:11,020:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:11,270:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:11,312:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:11,409:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:01:11,504:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:11,544:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:11,659:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:01:11,768:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:11,999:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:12,088:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:12,214:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:12,311:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:12,341:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:01:12,446:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:12,449:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:01:12,464:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:12,543:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:12,686:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:12,813:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:01:12,903:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:12,924:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:13,144:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:13,266:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:01:13,354:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:01:13,741:INFO:Calculating mean and std
2025-01-03 19:01:13,743:INFO:Creating metrics dataframe
2025-01-03 19:01:13,746:INFO:Uploading results into container
2025-01-03 19:01:13,747:INFO:Uploading model into container now
2025-01-03 19:01:13,747:INFO:_master_model_container: 4
2025-01-03 19:01:13,747:INFO:_display_container: 2
2025-01-03 19:01:13,747:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-03 19:01:13,747:INFO:create_model() successfully completed......................................
2025-01-03 19:01:13,925:INFO:SubProcess create_model() end ==================================
2025-01-03 19:01:13,925:INFO:Creating metrics dataframe
2025-01-03 19:01:13,935:INFO:Initializing SVM - Linear Kernel
2025-01-03 19:01:13,935:INFO:Total runtime is 3.5009688973426822 minutes
2025-01-03 19:01:13,939:INFO:SubProcess create_model() called ==================================
2025-01-03 19:01:13,939:INFO:Initializing create_model()
2025-01-03 19:01:13,939:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:01:13,939:INFO:Checking exceptions
2025-01-03 19:01:13,939:INFO:Importing libraries
2025-01-03 19:01:13,939:INFO:Copying training dataset
2025-01-03 19:01:14,102:INFO:Defining folds
2025-01-03 19:01:14,102:INFO:Declaring metric variables
2025-01-03 19:01:14,118:INFO:Importing untrained model
2025-01-03 19:01:14,118:INFO:SVM - Linear Kernel Imported successfully
2025-01-03 19:01:14,118:INFO:Starting cross validation
2025-01-03 19:01:14,130:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:05:47,392:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 19:05:48,056:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:05:48,203:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:48,544:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:48,750:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:05:48,895:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:50,598:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 19:05:51,215:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:05:51,358:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:51,700:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:51,892:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:05:52,023:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:55,125:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 19:05:55,688:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:05:55,809:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:56,104:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:56,278:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:05:56,399:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:57,997:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 19:05:58,441:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:05:58,533:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:58,775:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:58,909:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:05:59,006:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:59,037:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 19:05:59,495:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 19:05:59,534:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:05:59,631:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:59,688:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:05:59,783:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:59,870:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:05:59,895:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:00,007:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:00,007:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:00,019:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:00,102:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:00,178:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:00,262:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:00,269:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:00,380:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:00,479:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:01,840:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 19:06:02,185:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:02,282:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:02,504:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:02,626:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:02,713:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:07,907:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 19:06:08,160:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2025-01-03 19:06:08,210:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:08,307:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:08,447:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:08,516:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:08,530:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:08,628:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:08,727:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:08,739:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:08,864:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:08,949:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:09,336:INFO:Calculating mean and std
2025-01-03 19:06:09,336:INFO:Creating metrics dataframe
2025-01-03 19:06:09,336:INFO:Uploading results into container
2025-01-03 19:06:09,336:INFO:Uploading model into container now
2025-01-03 19:06:09,336:INFO:_master_model_container: 5
2025-01-03 19:06:09,336:INFO:_display_container: 2
2025-01-03 19:06:09,336:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-03 19:06:09,336:INFO:create_model() successfully completed......................................
2025-01-03 19:06:09,529:INFO:SubProcess create_model() end ==================================
2025-01-03 19:06:09,529:INFO:Creating metrics dataframe
2025-01-03 19:06:09,529:INFO:Initializing Ridge Classifier
2025-01-03 19:06:09,529:INFO:Total runtime is 8.427533372243246 minutes
2025-01-03 19:06:09,529:INFO:SubProcess create_model() called ==================================
2025-01-03 19:06:09,529:INFO:Initializing create_model()
2025-01-03 19:06:09,529:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:06:09,529:INFO:Checking exceptions
2025-01-03 19:06:09,529:INFO:Importing libraries
2025-01-03 19:06:09,529:INFO:Copying training dataset
2025-01-03 19:06:09,707:INFO:Defining folds
2025-01-03 19:06:09,707:INFO:Declaring metric variables
2025-01-03 19:06:09,711:INFO:Importing untrained model
2025-01-03 19:06:09,714:INFO:Ridge Classifier Imported successfully
2025-01-03 19:06:09,715:INFO:Starting cross validation
2025-01-03 19:06:09,723:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:06:21,677:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:21,792:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:22,052:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:22,204:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:22,302:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:22,339:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:22,426:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:22,707:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:22,859:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:22,954:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:23,108:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:23,234:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:23,498:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:23,609:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:23,620:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:23,710:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:23,731:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:23,950:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:24,093:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:24,204:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:24,284:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:24,381:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:24,624:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:24,748:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:24,844:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:25,022:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:25,120:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:25,346:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:25,427:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:25,474:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:25,523:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:25,564:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:25,762:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:25,897:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:25,981:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:26,010:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:26,108:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:26,335:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:26,422:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:26,466:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:26,509:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:26,552:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:26,718:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:26,782:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:06:26,841:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:26,869:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:26,926:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:27,078:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:27,188:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:06:27,287:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:06:27,676:INFO:Calculating mean and std
2025-01-03 19:06:27,677:INFO:Creating metrics dataframe
2025-01-03 19:06:27,679:INFO:Uploading results into container
2025-01-03 19:06:27,680:INFO:Uploading model into container now
2025-01-03 19:06:27,680:INFO:_master_model_container: 6
2025-01-03 19:06:27,680:INFO:_display_container: 2
2025-01-03 19:06:27,681:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-03 19:06:27,681:INFO:create_model() successfully completed......................................
2025-01-03 19:06:27,863:INFO:SubProcess create_model() end ==================================
2025-01-03 19:06:27,863:INFO:Creating metrics dataframe
2025-01-03 19:06:27,868:INFO:Initializing Random Forest Classifier
2025-01-03 19:06:27,868:INFO:Total runtime is 8.733186054229737 minutes
2025-01-03 19:06:27,868:INFO:SubProcess create_model() called ==================================
2025-01-03 19:06:27,868:INFO:Initializing create_model()
2025-01-03 19:06:27,868:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:06:27,868:INFO:Checking exceptions
2025-01-03 19:06:27,868:INFO:Importing libraries
2025-01-03 19:06:27,868:INFO:Copying training dataset
2025-01-03 19:06:28,049:INFO:Defining folds
2025-01-03 19:06:28,049:INFO:Declaring metric variables
2025-01-03 19:06:28,051:INFO:Importing untrained model
2025-01-03 19:06:28,054:INFO:Random Forest Classifier Imported successfully
2025-01-03 19:06:28,057:INFO:Starting cross validation
2025-01-03 19:06:28,063:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:07:46,045:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:07:48,580:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:07:49,758:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:07:50,817:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:07:51,570:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:07:53,370:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:07:54,417:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:07:55,223:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:07:56,800:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:07:58,263:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:07:59,094:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:07:59,660:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:02,161:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:02,255:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:03,259:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:03,352:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:03,424:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:03,716:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:08:03,794:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:08:03,902:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:03,983:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:03,989:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:04,134:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:04,215:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:08:04,342:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:04,369:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:04,417:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:04,578:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:08:04,621:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:04,688:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:04,781:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:08:04,897:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:05,094:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:05,253:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:05,313:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:05,438:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:08:05,454:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:05,523:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:05,583:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:08:05,675:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:06,064:INFO:Calculating mean and std
2025-01-03 19:08:06,066:INFO:Creating metrics dataframe
2025-01-03 19:08:06,069:INFO:Uploading results into container
2025-01-03 19:08:06,069:INFO:Uploading model into container now
2025-01-03 19:08:06,070:INFO:_master_model_container: 7
2025-01-03 19:08:06,070:INFO:_display_container: 2
2025-01-03 19:08:06,070:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-03 19:08:06,070:INFO:create_model() successfully completed......................................
2025-01-03 19:08:06,257:INFO:SubProcess create_model() end ==================================
2025-01-03 19:08:06,257:INFO:Creating metrics dataframe
2025-01-03 19:08:06,261:INFO:Initializing Quadratic Discriminant Analysis
2025-01-03 19:08:06,261:INFO:Total runtime is 10.373055005073548 minutes
2025-01-03 19:08:06,261:INFO:SubProcess create_model() called ==================================
2025-01-03 19:08:06,261:INFO:Initializing create_model()
2025-01-03 19:08:06,261:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:08:06,261:INFO:Checking exceptions
2025-01-03 19:08:06,261:INFO:Importing libraries
2025-01-03 19:08:06,261:INFO:Copying training dataset
2025-01-03 19:08:06,438:INFO:Defining folds
2025-01-03 19:08:06,438:INFO:Declaring metric variables
2025-01-03 19:08:06,443:INFO:Importing untrained model
2025-01-03 19:08:06,445:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-03 19:08:06,453:INFO:Starting cross validation
2025-01-03 19:08:06,455:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:08:18,683:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:08:18,807:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:19,079:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:19,266:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:08:19,386:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:19,388:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:19,669:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:19,960:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:19,978:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:08:20,085:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:20,352:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:20,624:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:20,813:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:08:20,921:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:21,168:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:21,275:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:08:21,378:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:21,432:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:21,623:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:21,821:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:08:21,864:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:21,920:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:22,141:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:22,382:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:22,447:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:08:22,543:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:22,771:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:22,945:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:08:23,001:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:23,062:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:23,292:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:23,476:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:08:23,517:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:23,570:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:23,779:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:23,821:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:08:23,918:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:24,000:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:24,127:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:24,349:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:08:24,740:INFO:Calculating mean and std
2025-01-03 19:08:24,740:INFO:Creating metrics dataframe
2025-01-03 19:08:24,740:INFO:Uploading results into container
2025-01-03 19:08:24,740:INFO:Uploading model into container now
2025-01-03 19:08:24,740:INFO:_master_model_container: 8
2025-01-03 19:08:24,740:INFO:_display_container: 2
2025-01-03 19:08:24,740:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-03 19:08:24,740:INFO:create_model() successfully completed......................................
2025-01-03 19:08:24,924:INFO:SubProcess create_model() end ==================================
2025-01-03 19:08:24,924:INFO:Creating metrics dataframe
2025-01-03 19:08:24,933:INFO:Initializing Ada Boost Classifier
2025-01-03 19:08:24,933:INFO:Total runtime is 10.68426879644394 minutes
2025-01-03 19:08:24,936:INFO:SubProcess create_model() called ==================================
2025-01-03 19:08:24,936:INFO:Initializing create_model()
2025-01-03 19:08:24,936:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:08:24,936:INFO:Checking exceptions
2025-01-03 19:08:24,936:INFO:Importing libraries
2025-01-03 19:08:24,939:INFO:Copying training dataset
2025-01-03 19:08:25,099:INFO:Defining folds
2025-01-03 19:08:25,099:INFO:Declaring metric variables
2025-01-03 19:08:25,113:INFO:Importing untrained model
2025-01-03 19:08:25,116:INFO:Ada Boost Classifier Imported successfully
2025-01-03 19:08:25,120:INFO:Starting cross validation
2025-01-03 19:08:25,126:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:08:36,509:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 19:08:36,906:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 19:08:37,665:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 19:08:38,469:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 19:08:39,209:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 19:08:40,077:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 19:08:40,868:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 19:08:41,594:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 19:08:42,413:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 19:08:43,139:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-03 19:09:11,328:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:09:11,453:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:11,580:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:09:11,687:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:11,727:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:11,959:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:11,998:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:12,105:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:09:12,105:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:09:12,222:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:12,227:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:12,497:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:12,728:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:09:12,757:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:12,839:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:13,108:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:13,361:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:13,376:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:09:13,482:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:13,719:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:13,952:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:14,219:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:09:14,319:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:14,537:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:14,593:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:09:14,690:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:14,756:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:14,929:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:15,023:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:09:15,105:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:15,159:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:15,328:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:15,548:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:15,591:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:09:15,686:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:15,898:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:16,068:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:09:16,106:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:16,150:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:16,368:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:16,587:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:09:16,979:INFO:Calculating mean and std
2025-01-03 19:09:16,980:INFO:Creating metrics dataframe
2025-01-03 19:09:16,980:INFO:Uploading results into container
2025-01-03 19:09:16,983:INFO:Uploading model into container now
2025-01-03 19:09:16,983:INFO:_master_model_container: 9
2025-01-03 19:09:16,983:INFO:_display_container: 2
2025-01-03 19:09:16,985:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-03 19:09:16,985:INFO:create_model() successfully completed......................................
2025-01-03 19:09:17,160:INFO:SubProcess create_model() end ==================================
2025-01-03 19:09:17,160:INFO:Creating metrics dataframe
2025-01-03 19:09:17,177:INFO:Initializing Gradient Boosting Classifier
2025-01-03 19:09:17,177:INFO:Total runtime is 11.555002280076344 minutes
2025-01-03 19:09:17,181:INFO:SubProcess create_model() called ==================================
2025-01-03 19:09:17,181:INFO:Initializing create_model()
2025-01-03 19:09:17,181:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:09:17,181:INFO:Checking exceptions
2025-01-03 19:09:17,182:INFO:Importing libraries
2025-01-03 19:09:17,182:INFO:Copying training dataset
2025-01-03 19:09:17,367:INFO:Defining folds
2025-01-03 19:09:17,367:INFO:Declaring metric variables
2025-01-03 19:09:17,371:INFO:Importing untrained model
2025-01-03 19:09:17,371:INFO:Gradient Boosting Classifier Imported successfully
2025-01-03 19:09:17,378:INFO:Starting cross validation
2025-01-03 19:09:17,383:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:18:40,423:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:18:40,563:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:40,854:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:41,149:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:42,997:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:18:43,103:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:43,376:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:43,648:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:44,795:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:18:44,909:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:44,938:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:18:45,046:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,157:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,297:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:18:45,297:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,367:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:18:45,367:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:18:45,392:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,481:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,488:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,536:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,589:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:18:45,658:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:18:45,699:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,720:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,732:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,756:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,852:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:18:45,907:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:18:45,937:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,952:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,979:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:45,988:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:46,001:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:46,129:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:18:46,172:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:46,221:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:46,229:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:46,376:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:18:46,452:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:46,470:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:46,680:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:46,892:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:18:47,280:INFO:Calculating mean and std
2025-01-03 19:18:47,282:INFO:Creating metrics dataframe
2025-01-03 19:18:47,282:INFO:Uploading results into container
2025-01-03 19:18:47,282:INFO:Uploading model into container now
2025-01-03 19:18:47,282:INFO:_master_model_container: 10
2025-01-03 19:18:47,282:INFO:_display_container: 2
2025-01-03 19:18:47,282:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-03 19:18:47,282:INFO:create_model() successfully completed......................................
2025-01-03 19:18:47,461:INFO:SubProcess create_model() end ==================================
2025-01-03 19:18:47,461:INFO:Creating metrics dataframe
2025-01-03 19:18:47,480:INFO:Initializing Linear Discriminant Analysis
2025-01-03 19:18:47,480:INFO:Total runtime is 21.0600523352623 minutes
2025-01-03 19:18:47,484:INFO:SubProcess create_model() called ==================================
2025-01-03 19:18:47,484:INFO:Initializing create_model()
2025-01-03 19:18:47,484:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:18:47,484:INFO:Checking exceptions
2025-01-03 19:18:47,484:INFO:Importing libraries
2025-01-03 19:18:47,484:INFO:Copying training dataset
2025-01-03 19:18:47,668:INFO:Defining folds
2025-01-03 19:18:47,668:INFO:Declaring metric variables
2025-01-03 19:18:47,686:INFO:Importing untrained model
2025-01-03 19:18:47,689:INFO:Linear Discriminant Analysis Imported successfully
2025-01-03 19:18:47,693:INFO:Starting cross validation
2025-01-03 19:18:47,697:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:19:00,124:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:19:00,263:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:00,394:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:19:00,516:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:00,526:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:00,693:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:19:00,792:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:00,821:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:00,983:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:19:01,097:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:01,274:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:19:01,385:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:01,661:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:01,804:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:19:01,848:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:19:01,916:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:01,940:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:02,180:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:02,332:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:19:02,440:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:02,634:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:19:02,732:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:02,972:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:03,114:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:19:03,228:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:03,306:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:19:03,398:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:03,640:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:03,778:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:19:03,787:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:19:03,870:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:03,884:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:04,106:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:04,244:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:19:04,342:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:04,482:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:19:04,579:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:04,775:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:19:04,800:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:04,864:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:04,927:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:19:05,029:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:05,064:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:05,192:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-01-03 19:19:05,194:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:19:05,283:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:05,285:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:05,494:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:05,622:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:19:05,719:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:19:06,106:INFO:Calculating mean and std
2025-01-03 19:19:06,106:INFO:Creating metrics dataframe
2025-01-03 19:19:06,106:INFO:Uploading results into container
2025-01-03 19:19:06,106:INFO:Uploading model into container now
2025-01-03 19:19:06,106:INFO:_master_model_container: 11
2025-01-03 19:19:06,106:INFO:_display_container: 2
2025-01-03 19:19:06,106:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-03 19:19:06,106:INFO:create_model() successfully completed......................................
2025-01-03 19:19:06,289:INFO:SubProcess create_model() end ==================================
2025-01-03 19:19:06,289:INFO:Creating metrics dataframe
2025-01-03 19:19:06,300:INFO:Initializing Extra Trees Classifier
2025-01-03 19:19:06,300:INFO:Total runtime is 21.37370322942734 minutes
2025-01-03 19:19:06,302:INFO:SubProcess create_model() called ==================================
2025-01-03 19:19:06,302:INFO:Initializing create_model()
2025-01-03 19:19:06,302:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:19:06,302:INFO:Checking exceptions
2025-01-03 19:19:06,302:INFO:Importing libraries
2025-01-03 19:19:06,302:INFO:Copying training dataset
2025-01-03 19:19:06,482:INFO:Defining folds
2025-01-03 19:19:06,482:INFO:Declaring metric variables
2025-01-03 19:19:06,482:INFO:Importing untrained model
2025-01-03 19:19:06,493:INFO:Extra Trees Classifier Imported successfully
2025-01-03 19:19:06,498:INFO:Starting cross validation
2025-01-03 19:19:06,498:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:20:20,415:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:21,492:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:21,494:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:21,643:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:21,881:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:20:21,925:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,045:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,069:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,105:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,111:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,167:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,259:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,299:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:20:22,311:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,319:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:20:22,392:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,520:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,522:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,596:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:20:22,622:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,661:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:20:22,707:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,764:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,880:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:20:22,894:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,894:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:22,929:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:20:23,031:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:23,076:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:23,089:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:23,230:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:23,230:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:23,378:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:23,380:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:20:23,467:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:23,492:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:23,519:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:20:23,600:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:20:23,600:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:23,698:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:20:24,100:INFO:Calculating mean and std
2025-01-03 19:20:24,102:INFO:Creating metrics dataframe
2025-01-03 19:20:24,102:INFO:Uploading results into container
2025-01-03 19:20:24,102:INFO:Uploading model into container now
2025-01-03 19:20:24,102:INFO:_master_model_container: 12
2025-01-03 19:20:24,102:INFO:_display_container: 2
2025-01-03 19:20:24,102:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-03 19:20:24,102:INFO:create_model() successfully completed......................................
2025-01-03 19:20:24,280:INFO:SubProcess create_model() end ==================================
2025-01-03 19:20:24,280:INFO:Creating metrics dataframe
2025-01-03 19:20:24,294:INFO:Initializing Light Gradient Boosting Machine
2025-01-03 19:20:24,294:INFO:Total runtime is 22.673615248998008 minutes
2025-01-03 19:20:24,294:INFO:SubProcess create_model() called ==================================
2025-01-03 19:20:24,294:INFO:Initializing create_model()
2025-01-03 19:20:24,294:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:20:24,294:INFO:Checking exceptions
2025-01-03 19:20:24,294:INFO:Importing libraries
2025-01-03 19:20:24,294:INFO:Copying training dataset
2025-01-03 19:20:24,488:INFO:Defining folds
2025-01-03 19:20:24,488:INFO:Declaring metric variables
2025-01-03 19:20:24,488:INFO:Importing untrained model
2025-01-03 19:20:24,502:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-03 19:20:24,506:INFO:Starting cross validation
2025-01-03 19:20:24,510:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:21:04,367:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:04,787:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:05,045:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:05,186:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:05,427:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:05,993:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:06,377:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:06,839:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:06,841:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:07,215:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:07,223:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:07,532:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:21:07,731:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:08,111:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:08,490:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:08,845:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:10,443:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:10,860:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:10,900:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:11,338:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:11,356:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:11,390:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:11,770:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:11,796:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:12,262:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:12,282:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:12,512:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:12,538:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:12,735:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:12,760:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:12,964:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:13,358:INFO:Calculating mean and std
2025-01-03 19:21:13,358:INFO:Creating metrics dataframe
2025-01-03 19:21:13,361:INFO:Uploading results into container
2025-01-03 19:21:13,361:INFO:Uploading model into container now
2025-01-03 19:21:13,362:INFO:_master_model_container: 13
2025-01-03 19:21:13,362:INFO:_display_container: 2
2025-01-03 19:21:13,362:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-03 19:21:13,362:INFO:create_model() successfully completed......................................
2025-01-03 19:21:13,537:INFO:SubProcess create_model() end ==================================
2025-01-03 19:21:13,537:INFO:Creating metrics dataframe
2025-01-03 19:21:13,553:INFO:Initializing Dummy Classifier
2025-01-03 19:21:13,553:INFO:Total runtime is 23.49458900690079 minutes
2025-01-03 19:21:13,553:INFO:SubProcess create_model() called ==================================
2025-01-03 19:21:13,553:INFO:Initializing create_model()
2025-01-03 19:21:13,553:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002405024C490>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:21:13,553:INFO:Checking exceptions
2025-01-03 19:21:13,553:INFO:Importing libraries
2025-01-03 19:21:13,553:INFO:Copying training dataset
2025-01-03 19:21:13,746:INFO:Defining folds
2025-01-03 19:21:13,746:INFO:Declaring metric variables
2025-01-03 19:21:13,757:INFO:Importing untrained model
2025-01-03 19:21:13,759:INFO:Dummy Classifier Imported successfully
2025-01-03 19:21:13,761:INFO:Starting cross validation
2025-01-03 19:21:13,761:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:21:25,717:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:25,978:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:26,046:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:26,142:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:21:26,250:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:26,338:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:26,485:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:21:26,585:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:27,325:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:27,593:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:27,645:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:27,728:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:21:27,851:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:27,906:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:28,045:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:21:28,146:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:28,158:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:28,393:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:28,545:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:21:28,642:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:29,061:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:29,283:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:29,420:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:21:29,517:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:29,560:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:29,781:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:29,919:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:21:30,016:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:30,128:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:30,336:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:30,447:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:30,462:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:21:30,558:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:30,670:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:30,780:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:30,795:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:21:30,877:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:31,004:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:31,128:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:21:31,216:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:31,811:INFO:Calculating mean and std
2025-01-03 19:21:31,812:INFO:Creating metrics dataframe
2025-01-03 19:21:31,813:INFO:Uploading results into container
2025-01-03 19:21:31,813:INFO:Uploading model into container now
2025-01-03 19:21:31,813:INFO:_master_model_container: 14
2025-01-03 19:21:31,813:INFO:_display_container: 2
2025-01-03 19:21:31,813:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-03 19:21:31,813:INFO:create_model() successfully completed......................................
2025-01-03 19:21:31,989:INFO:SubProcess create_model() end ==================================
2025-01-03 19:21:31,989:INFO:Creating metrics dataframe
2025-01-03 19:21:32,003:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-03 19:21:32,015:INFO:Initializing create_model()
2025-01-03 19:21:32,015:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:21:32,015:INFO:Checking exceptions
2025-01-03 19:21:32,017:INFO:Importing libraries
2025-01-03 19:21:32,017:INFO:Copying training dataset
2025-01-03 19:21:32,200:INFO:Defining folds
2025-01-03 19:21:32,200:INFO:Declaring metric variables
2025-01-03 19:21:32,200:INFO:Importing untrained model
2025-01-03 19:21:32,200:INFO:Declaring custom model
2025-01-03 19:21:32,200:INFO:K Neighbors Classifier Imported successfully
2025-01-03 19:21:32,200:INFO:Cross validation set to False
2025-01-03 19:21:32,200:INFO:Fitting Model
2025-01-03 19:21:38,980:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-03 19:21:38,980:INFO:create_model() successfully completed......................................
2025-01-03 19:21:39,191:INFO:_master_model_container: 14
2025-01-03 19:21:39,191:INFO:_display_container: 2
2025-01-03 19:21:39,191:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-03 19:21:39,191:INFO:compare_models() successfully completed......................................
2025-01-03 19:21:39,224:INFO:Initializing create_model()
2025-01-03 19:21:39,224:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 19:21:39,224:INFO:Checking exceptions
2025-01-03 19:21:39,237:INFO:Importing libraries
2025-01-03 19:21:39,237:INFO:Copying training dataset
2025-01-03 19:21:39,430:INFO:Defining folds
2025-01-03 19:21:39,430:INFO:Declaring metric variables
2025-01-03 19:21:39,430:INFO:Importing untrained model
2025-01-03 19:21:39,430:INFO:Declaring custom model
2025-01-03 19:21:39,438:INFO:K Neighbors Classifier Imported successfully
2025-01-03 19:21:39,439:INFO:Starting cross validation
2025-01-03 19:21:39,445:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 19:21:58,019:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:58,237:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:58,399:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:58,704:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:21:58,716:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:58,910:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:59,010:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:21:59,191:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:59,371:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:21:59,895:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:00,059:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:22:00,093:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:00,182:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:00,459:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:00,738:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:22:00,869:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:00,920:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:01,306:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:01,356:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:01,471:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:22:01,538:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:01,600:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:01,619:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:01,767:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:22:01,783:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:01,963:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:02,023:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:22:02,145:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:02,221:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:02,456:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:02,587:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:22:02,726:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:03,081:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:03,212:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:03,292:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:03,408:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:22:03,424:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:03,503:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:03,542:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 19:22:03,637:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 19:22:04,025:INFO:Calculating mean and std
2025-01-03 19:22:04,025:INFO:Creating metrics dataframe
2025-01-03 19:22:04,033:INFO:Finalizing model
2025-01-03 19:22:10,774:INFO:Uploading results into container
2025-01-03 19:22:10,774:INFO:Uploading model into container now
2025-01-03 19:22:10,779:INFO:_master_model_container: 15
2025-01-03 19:22:10,779:INFO:_display_container: 3
2025-01-03 19:22:10,779:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-03 19:22:10,779:INFO:create_model() successfully completed......................................
2025-01-03 19:22:10,998:INFO:Initializing tune_model()
2025-01-03 19:22:10,998:INFO:tune_model(estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>)
2025-01-03 19:22:10,998:INFO:Checking exceptions
2025-01-03 19:22:11,089:INFO:Copying training dataset
2025-01-03 19:22:11,204:INFO:Checking base model
2025-01-03 19:22:11,213:INFO:Base model : K Neighbors Classifier
2025-01-03 19:22:11,215:INFO:Declaring metric variables
2025-01-03 19:22:11,219:INFO:Defining Hyperparameters
2025-01-03 19:22:11,400:INFO:Tuning with n_jobs=-1
2025-01-03 19:22:11,400:INFO:Initializing RandomizedSearchCV
2025-01-03 20:09:50,365:INFO:best_params: {'actual_estimator__weights': 'distance', 'actual_estimator__n_neighbors': 42, 'actual_estimator__metric': 'minkowski'}
2025-01-03 20:09:50,367:INFO:Hyperparameter search completed
2025-01-03 20:09:50,367:INFO:SubProcess create_model() called ==================================
2025-01-03 20:09:50,367:INFO:Initializing create_model()
2025-01-03 20:09:50,367:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024062E300D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'weights': 'distance', 'n_neighbors': 42, 'metric': 'minkowski'})
2025-01-03 20:09:50,367:INFO:Checking exceptions
2025-01-03 20:09:50,367:INFO:Importing libraries
2025-01-03 20:09:50,367:INFO:Copying training dataset
2025-01-03 20:09:50,617:INFO:Defining folds
2025-01-03 20:09:50,617:INFO:Declaring metric variables
2025-01-03 20:09:50,622:INFO:Importing untrained model
2025-01-03 20:09:50,622:INFO:Declaring custom model
2025-01-03 20:09:50,628:INFO:K Neighbors Classifier Imported successfully
2025-01-03 20:09:50,634:INFO:Starting cross validation
2025-01-03 20:09:50,648:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 20:09:56,749:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\joblib\externals\loky\process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(

2025-01-03 20:10:09,206:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:09,545:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:09,773:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:09,925:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:10,458:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:10,746:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:10,926:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:11,053:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:17,250:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:17,593:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:17,843:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:18,033:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:18,479:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:18,926:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:19,301:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:19,529:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:20,177:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:20,575:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:20,617:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:20,823:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:21,011:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:21,039:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:21,282:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:21,457:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:21,473:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:21,999:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:22,452:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:22,697:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:22,808:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:23,098:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:23,192:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:23,363:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:23,443:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:23,476:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:23,599:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:23,656:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:23,697:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:23,991:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:24,136:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:24,227:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:24,608:INFO:Calculating mean and std
2025-01-03 20:10:24,608:INFO:Creating metrics dataframe
2025-01-03 20:10:24,608:INFO:Finalizing model
2025-01-03 20:10:31,799:INFO:Uploading results into container
2025-01-03 20:10:31,799:INFO:Uploading model into container now
2025-01-03 20:10:31,799:INFO:_master_model_container: 16
2025-01-03 20:10:31,799:INFO:_display_container: 4
2025-01-03 20:10:31,799:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance')
2025-01-03 20:10:31,799:INFO:create_model() successfully completed......................................
2025-01-03 20:10:32,003:INFO:SubProcess create_model() end ==================================
2025-01-03 20:10:32,003:INFO:choose_better activated
2025-01-03 20:10:32,004:INFO:SubProcess create_model() called ==================================
2025-01-03 20:10:32,007:INFO:Initializing create_model()
2025-01-03 20:10:32,007:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 20:10:32,007:INFO:Checking exceptions
2025-01-03 20:10:32,007:INFO:Importing libraries
2025-01-03 20:10:32,007:INFO:Copying training dataset
2025-01-03 20:10:32,215:INFO:Defining folds
2025-01-03 20:10:32,215:INFO:Declaring metric variables
2025-01-03 20:10:32,215:INFO:Importing untrained model
2025-01-03 20:10:32,215:INFO:Declaring custom model
2025-01-03 20:10:32,215:INFO:K Neighbors Classifier Imported successfully
2025-01-03 20:10:32,215:INFO:Starting cross validation
2025-01-03 20:10:32,220:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 20:10:55,386:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:55,590:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:55,764:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:55,764:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:56,059:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:56,076:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:56,104:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:56,222:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:56,233:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:56,260:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:56,339:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:56,503:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:56,540:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:56,571:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:56,742:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:56,802:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:56,909:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:56,962:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:57,063:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:57,095:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:57,217:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:57,482:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:57,514:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:57,639:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:57,697:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:57,845:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:57,880:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:57,886:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:58,034:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:58,034:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:58,130:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:58,140:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:58,150:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:58,183:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:58,281:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:58,282:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:58,390:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:58,390:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:58,556:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-03 20:10:58,653:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:10:59,070:INFO:Calculating mean and std
2025-01-03 20:10:59,071:INFO:Creating metrics dataframe
2025-01-03 20:10:59,072:INFO:Finalizing model
2025-01-03 20:11:05,901:INFO:Uploading results into container
2025-01-03 20:11:05,901:INFO:Uploading model into container now
2025-01-03 20:11:05,901:INFO:_master_model_container: 17
2025-01-03 20:11:05,901:INFO:_display_container: 5
2025-01-03 20:11:05,901:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-03 20:11:05,901:INFO:create_model() successfully completed......................................
2025-01-03 20:11:06,095:INFO:SubProcess create_model() end ==================================
2025-01-03 20:11:06,096:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform') result for Accuracy is 0.6762
2025-01-03 20:11:06,096:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance') result for Accuracy is 0.7027
2025-01-03 20:11:06,096:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance') is best model
2025-01-03 20:11:06,096:INFO:choose_better completed
2025-01-03 20:11:06,103:INFO:_master_model_container: 17
2025-01-03 20:11:06,103:INFO:_display_container: 4
2025-01-03 20:11:06,103:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance')
2025-01-03 20:11:06,103:INFO:tune_model() successfully completed......................................
2025-01-03 20:11:06,303:INFO:Initializing finalize_model()
2025-01-03 20:11:06,303:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-01-03 20:11:06,303:INFO:Finalizing KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance')
2025-01-03 20:11:06,378:INFO:Initializing create_model()
2025-01-03 20:11:06,379:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,
                     weights='distance'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 20:11:06,379:INFO:Checking exceptions
2025-01-03 20:11:06,380:INFO:Importing libraries
2025-01-03 20:11:06,380:INFO:Copying training dataset
2025-01-03 20:11:06,391:INFO:Defining folds
2025-01-03 20:11:06,391:INFO:Declaring metric variables
2025-01-03 20:11:06,391:INFO:Importing untrained model
2025-01-03 20:11:06,391:INFO:Declaring custom model
2025-01-03 20:11:06,391:INFO:K Neighbors Classifier Imported successfully
2025-01-03 20:11:06,394:INFO:Cross validation set to False
2025-01-03 20:11:06,394:INFO:Fitting Model
2025-01-03 20:11:16,036:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['start_station', 'end_lon',
                                             'end_station', 'duration',
                                             'start_lat', 'end_lat',
                                             'start_lon'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=Tru...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False)
2025-01-03 20:11:16,036:INFO:create_model() successfully completed......................................
2025-01-03 20:11:16,218:INFO:_master_model_container: 17
2025-01-03 20:11:16,218:INFO:_display_container: 4
2025-01-03 20:11:16,232:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['start_station', 'end_lon',
                                             'end_station', 'duration',
                                             'start_lat', 'end_lat',
                                             'start_lon'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=Tru...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False)
2025-01-03 20:11:16,232:INFO:finalize_model() successfully completed......................................
2025-01-03 20:11:16,466:INFO:Initializing save_model()
2025-01-03 20:11:16,466:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['start_station', 'end_lon',
                                             'end_station', 'duration',
                                             'start_lat', 'end_lat',
                                             'start_lon'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=Tru...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False), model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['start_station', 'end_lon',
                                             'end_station', 'duration',
                                             'start_lat', 'end_lat',
                                             'start_lon'],
                                    transformer=Si...
                                    transformer=TargetEncoder(cols=['start_time',
                                                                    'bike_id',
                                                                    'end_time'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-01-03 20:11:16,466:INFO:Adding model into prep_pipe
2025-01-03 20:11:16,466:WARNING:Only Model saved as it was a pipeline.
2025-01-03 20:11:17,189:INFO:C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model.pkl saved in current working directory
2025-01-03 20:11:17,202:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['start_station', 'end_lon',
                                             'end_station', 'duration',
                                             'start_lat', 'end_lat',
                                             'start_lon'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=Tru...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False)
2025-01-03 20:11:17,202:INFO:save_model() successfully completed......................................
2025-01-03 20:11:17,399:INFO:Initializing load_model()
2025-01-03 20:11:17,399:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model, platform=None, authentication=None, verbose=True)
2025-01-03 20:11:17,757:INFO:Initializing predict_model()
2025-01-03 20:11:17,757:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['start_station', 'end_lon',
                                             'end_station', 'duration',
                                             'start_lat', 'end_lat',
                                             'start_lon'],
                                    transformer=Si...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023F83259630>)
2025-01-03 20:11:17,757:INFO:Checking exceptions
2025-01-03 20:11:17,757:INFO:Preloading libraries
2025-01-03 20:11:28,268:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:11:29,267:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:11:30,239:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Walk-up') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-03 20:11:31,809:INFO:Initializing plot_model()
2025-01-03 20:11:31,809:INFO:plot_model(plot=error, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['start_station', 'end_lon',
                                             'end_station', 'duration',
                                             'start_lat', 'end_lat',
                                             'start_lon'],
                                    transformer=Si...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, system=True)
2025-01-03 20:11:31,809:INFO:Checking exceptions
2025-01-03 20:11:31,891:INFO:Preloading libraries
2025-01-03 20:11:31,906:INFO:Copying training dataset
2025-01-03 20:11:31,906:INFO:Plot type: error
2025-01-03 20:11:41,876:INFO:Fitting Model
2025-01-03 20:11:41,876:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but KNeighborsClassifier was fitted with feature names
  warnings.warn(

2025-01-03 20:11:41,876:INFO:Scoring test/hold-out set
2025-01-03 20:11:46,566:INFO:Visual Rendered Successfully
2025-01-03 20:11:46,761:INFO:plot_model() successfully completed......................................
2025-01-03 20:11:46,815:INFO:Initializing evaluate_model()
2025-01-03 20:11:46,816:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['start_station', 'end_lon',
                                             'end_station', 'duration',
                                             'start_lat', 'end_lat',
                                             'start_lon'],
                                    transformer=Si...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-03 20:11:46,904:INFO:Initializing plot_model()
2025-01-03 20:11:46,905:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=FastMemory(location=C:\Users\jacj2\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['start_station', 'end_lon',
                                             'end_station', 'duration',
                                             'start_lat', 'end_lat',
                                             'start_lon'],
                                    transformer=Si...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[], include=None,
                                    transformer=RemoveMulticollinearity(threshold=0.95))),
                ('actual_estimator',
                 KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                      metric='minkowski', metric_params=None,
                                      n_jobs=-1, n_neighbors=42, p=2,
                                      weights='distance'))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, system=True)
2025-01-03 20:11:46,905:INFO:Checking exceptions
2025-01-03 20:11:46,967:INFO:Preloading libraries
2025-01-03 20:11:46,984:INFO:Copying training dataset
2025-01-03 20:11:46,984:INFO:Plot type: pipeline
2025-01-03 20:11:47,094:INFO:Visual Rendered Successfully
2025-01-03 20:11:47,287:INFO:plot_model() successfully completed......................................
2025-01-03 20:11:47,357:INFO:Initializing compare_models()
2025-01-03 20:11:47,357:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-03 20:11:47,357:INFO:Checking exceptions
2025-01-03 20:11:47,433:INFO:Preparing display monitor
2025-01-03 20:11:47,453:INFO:Initializing Logistic Regression
2025-01-03 20:11:47,453:INFO:Total runtime is 0.0 minutes
2025-01-03 20:11:47,457:INFO:SubProcess create_model() called ==================================
2025-01-03 20:11:47,457:INFO:Initializing create_model()
2025-01-03 20:11:47,457:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023F8B3CED40>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024036785390>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-03 20:11:47,457:INFO:Checking exceptions
2025-01-03 20:11:47,457:INFO:Importing libraries
2025-01-03 20:11:47,457:INFO:Copying training dataset
2025-01-03 20:11:47,628:INFO:Defining folds
2025-01-03 20:11:47,628:INFO:Declaring metric variables
2025-01-03 20:11:47,643:INFO:Importing untrained model
2025-01-03 20:11:47,643:INFO:Logistic Regression Imported successfully
2025-01-03 20:11:47,643:INFO:Starting cross validation
2025-01-03 20:11:47,643:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-03 20:12:58,393:WARNING:C:\Users\jacj2\AppData\Local\Temp\ipykernel_15844\2316916227.py:1: DtypeWarning: Columns (8) have mixed types. Specify dtype option on import or set low_memory=False.
  test=pd.read_csv(r"../data/test_set.csv")

2025-01-03 20:12:58,531:INFO:Initializing load_model()
2025-01-03 20:12:58,532:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model, platform=None, authentication=None, verbose=True)
2025-01-03 20:13:03,820:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.82s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 20:13:05,967:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 20:13:07,991:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 20:13:12,589:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 1.84s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 20:13:14,641:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:328: UserWarning: Persisting input arguments took 1.88s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2025-01-03 20:14:46,245:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.76s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 20:14:48,387:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 20:14:50,436:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 20:15:04,353:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 1.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-01-03 20:15:06,315:WARNING:c:\Users\jacj2\anaconda3\envs\tensor_gpu1\lib\site-packages\pycaret\internal\pipeline.py:328: UserWarning: Persisting input arguments took 1.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2025-01-03 20:27:05,578:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-03 20:27:05,578:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-03 20:27:05,579:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-03 20:27:05,579:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-03 20:27:14,313:WARNING:C:\Users\jacj2\AppData\Local\Temp\ipykernel_22468\2316916227.py:1: DtypeWarning: Columns (8) have mixed types. Specify dtype option on import or set low_memory=False.
  test=pd.read_csv(r"../data/test_set.csv")

2025-01-03 20:27:14,406:INFO:Initializing load_model()
2025-01-03 20:27:14,406:INFO:load_model(model_name=C:\Users\jacj2\OneDrive\Desktop\prueba_tecnica_Arkon\model, platform=None, authentication=None, verbose=True)
